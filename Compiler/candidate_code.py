from mpc_nonlinear import *

@types.vectorize
def sigmoid_0(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -14.0625, -13.28125, -12.5, -11.71875, -10.9375, -10.15625, -9.375, -8.59375, -7.8125, -7.03125, -6.25, -5.46875, -4.6875, -3.90625, -3.125, -1.5625, -0.78125, 0.0, 1.5625, 3.125, 6.25, 25.0]
    coeffA = [[16.6028790843, 1.45320207928, 0.04124234645, 0.00037638913], [2612.9271329002, 528.97548775303, 35.87688192739, 0.81474158414], [4851.44175199212, 1036.19523754837, 74.19066745225, 1.77953920366], [8925.21183354715, 2017.13089826863, 152.93384472905, 3.88677543895], [16251.48128490013, 3899.23695859287, 314.12477747327, 8.48904232021], [29249.7844861078, 7477.81898535227, 642.58218014852, 18.53959904076], [51953.20512761147, 14210.89864653707, 1308.30045425869, 40.48383697484], [90885.9445170615, 26722.9666857749, 2648.93613860642, 88.3753730334], [156194.72072169432, 49627.5615154156, 5327.23070901434, 192.79379815899], [262809.78324712586, 90773.9311842186, 10622.05739826211, 419.97748533437], [430874.3156195709, 162873.95358031453, 20936.1910343707, 911.97769842326], [683492.1908434051, 284849.4732608339, 40577.15142710031, 1966.68087435553], [1037635.6931923103, 480346.21719223773, 76572.42376262468, 4177.18576742146], [1481589.9750325773, 766247.7116361401, 137996.8653786515, 8579.74053017636], [1936836.7476717061, 1117435.4365619295, 228413.41643473733, 16348.71229766736], [2269435.7510730503, 1440104.3460839072, 333102.3854500525, 27706.49019097295], [2130818.7264477913, 1170681.5126684294, 156772.05579700615, -11126.94952336074], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693], [1924843.2523662716, 1440104.346083892, -333102.38545004645, 27706.49019097214], [2787704.4507286875, 694041.9937639799, -117027.98436731524, 6685.2309741175], [4158346.155586101, 6465.34589668481, -361.56592641943, 6.41778588096], [4194279.002084346, 0.00010139502, -2.4762e-06, 1.981e-08]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid_1(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -14.0625, -12.5, -10.9375, -9.375, -7.8125, -6.25, -4.6875, -3.125, -1.5625, -0.78125, 0.0, 1.5625, 6.25]
    coeffA = [[39.04050317349, 4.89850230114, 0.22266779325, 0.00436140847, 3.110259e-05], [13199.17733475028, 3638.15329161463, 378.25644554402, 17.56859597785, 0.30738283636], [40012.2430064598, 12326.00868600312, 1434.5748829024, 74.68625393269, 1.46627626567], [114348.25963193768, 39901.1878375304, 5273.66859954668, 312.42739652623, 6.99145300912], [303427.7872428325, 121881.79830384481, 18618.32177702964, 1278.92322584934, 33.26887252545], [727105.1401896989, 342780.98272627854, 61881.56516531322, 5050.85981956463, 156.78091982208], [1486077.5898151868, 838271.7159290379, 183552.65378658805, 18368.32181857447, 704.92482957096], [2298433.5619488554, 1535707.1429087692, 409350.0500425329, 51038.18841377141, 2487.03093801351], [2265248.6629461953, 1433866.8538834178, 329931.63513002236, 27075.5667369432, -37.69601574701], [2099587.2578837527, 1055889.181417289, 2524.40417547048, -100956.99990221234, -19163.74408082196], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266, 0.0], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693, 0.0], [1875484.219568071, 1537426.6752580297, -402130.4764995988, 48464.74365712389, -2242.76923540077], [4166939.6392281144, 4302.39617763188, -223.54909378416, 4.72754763382, -0.03517618631]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid_2(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.625, -12.5, -10.9375, -9.375, -7.8125, -6.25, -4.6875, -3.125, -0.78125, 0.0, 1.5625, 6.25]
    coeffA = [[31.8188826283, 4.96858203929, 0.29901735638, 0.00870329416, 0.00012299702, 6.7761e-07], [24513.40203025012, 7990.1549534933, 1047.22750273889, 68.9364868011, 2.27773825615, 0.03020357701], [104058.8416318895, 39725.6992028949, 6120.16942565575, 475.05783978054, 18.56019320482, 0.2917361824], [263256.2054768809, 113471.27222333685, 19800.04796618196, 1745.26281159782, 77.59370739659, 1.39032131716], [608928.5983402755, 300515.2251691288, 60346.67333996427, 6146.66972606925, 316.83474229644, 6.59935115109], [1245422.4005197044, 714120.7810445316, 168098.87261485847, 20213.58375017237, 1237.01950784371, 30.72678650417], [2105567.068421058, 1410543.8334983333, 394462.87090870674, 57133.04624551638, 4258.19265030018, 129.94808030081], [2556604.365472179, 1873086.438481149, 584784.9236057493, 96415.54130856614, 8325.76992329171, 299.00462056135], [2099440.7063370263, 1048252.5231863798, -22215.26144827237, -130798.12684255086, -34800.13233448586, -3009.76276279416], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266, 0.0, 0.0], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693, 0.0, 0.0], [1811912.166946969, 1643617.4983735702, -468320.31905330776, 67834.15697929384, -4919.09759380344, 140.54194642479], [4148651.434690562, 9656.32978090217, -725.43045030204, 25.10203747417, -0.40692434011, 0.00250211087]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid_3(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.625, -12.5, -9.375, -6.25, -3.125, -0.78125, 0.0, 1.5625, 12.5]
    coeffA = [[72.69609768235, 14.02871514157, 1.10119227061, 0.04502288064, 0.00101202505, 1.187192e-05, 5.686e-08], [62183.23932408683, 24162.7089936723, 3936.64766420814, 343.91636561591, 16.97966378348, 0.44890860069, 0.00496242991], [366372.52466398466, 176582.27638259606, 35861.09778386994, 3920.85427294143, 243.0449521177, 8.08850285801, 0.11278589921], [1473611.6905421386, 920133.7877163024, 245243.7997642538, 35554.62701525312, 2946.08951933399, 131.88174884064, 2.48546387762], [2649827.1136657535, 2012321.7826827748, 670939.6083058974, 124691.5200608887, 13518.50984746394, 805.06700412267, 20.45244483641], [2086685.594056033, 998760.4034867941, -97805.7302069218, -189227.7113920223, -59052.81660348854, -8162.20079125634, -439.67471176205], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266, 0.0, 0.0, 0.0], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693, 0.0, 0.0, 0.0], [1776053.61516664, 1704501.7711873485, -508252.05893370585, 80957.08992609136, -7196.72052566599, 336.6136134217, -6.45349564281], [4193457.5972299566, 170.78125838207, -14.1698123814, 0.60276617445, -0.01392155111, 0.00016617755, -8.0382e-07]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid_4(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -18.75, -12.5, -9.375, -6.25, -3.125, -0.78125, 0.0, 1.5625, 12.5]
    coeffA = [[20.77946311036, 4.39226544597, 0.39195034593, 0.01914269119, 0.00055278406, 9.44244e-06, 8.839e-08, 3.5e-10], [68450.66103391733, 28332.3747197649, 5046.46894909524, 501.00957933865, 29.92152176936, 1.07435035435, 0.02146305422, 0.00018396287], [655901.3990556584, 363617.36329975823, 87553.08268448504, 11844.02583619449, 970.45181242645, 48.08865403704, 1.33270729537, 0.01591798027], [2041281.2721337646, 1438602.0861535033, 447481.83319734933, 79229.4460410001, 8585.86848539188, 567.36219951534, 21.10382489739, 0.34001008655], [2584599.438595488, 1910386.1595284431, 603387.278520455, 100077.0755486333, 8190.97579656679, 119.91880798986, -28.04075341257, -1.45764843073], [2092157.3117829396, 1023045.299076949, -53720.09528584688, -146667.7878567746, -35365.57638927358, -532.91413551835, 881.56199255933, 95.19833908789], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266, 0.0, 0.0, 0.0, 0.0], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693, 0.0, 0.0, 0.0, 0.0], [1725086.6498071735, 1792064.4172804987, -565683.9261075202, 99635.20134708258, -10492.32850474073, 657.01447936738, -22.57147806942, 0.32747646835], [4192498.6020525573, 438.30772486278, -44.62169143887, 2.43966326513, -0.07755240882, 0.00143704087, -1.44094e-05, 6.046e-08]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid_5(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -18.75, -12.5, -9.375, -6.25, -0.78125, 0.0, 1.5625, 12.5]
    coeffA = [[58.08446815933, 14.14067453456, 1.48680001513, 0.08818505204, 0.0032275634, 7.466101e-05, 1.06632e-06, 8.6e-09, 3e-11], [142618.87792933927, 67007.65543866623, 13843.4895476466, 1641.03532835524, 121.98693695808, 5.81884667117, 0.17383518135, 0.00297223846, 2.225915e-05], [1040667.1515960495, 648334.2213311858, 179573.23238474634, 28810.43086918136, 2922.33099329342, 191.56288779603, 7.9131519829, 0.18809768485, 0.00196776816], [2544284.361873844, 1965156.8457455344, 687836.4688345763, 141715.38671362054, 18705.26943631404, 1612.74781439916, 88.37930408515, 2.80598946756, 0.03941892709], [2076731.649152986, 956837.8791774448, -168759.89784376905, -251962.65275541524, -90643.98745667694, -17381.59900171872, -1937.91158538421, -118.96215187239, -3.12285785598], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266, 0.0, 0.0, 0.0, 0.0, 0.0], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693, 0.0, 0.0, 0.0, 0.0, 0.0], [1814240.8996937042, 1635980.3575329492, -458285.64733845147, 61154.48028466266, -2510.52783763136, -337.41513149382, 50.83057262129, -2.63006022611, 0.05010677293], [4190995.214109579, 934.4189756761, -113.40116667463, 7.67221102536, -0.31675470985, 0.00817913071, -0.00012911721, 1.14046e-06, -4.32e-09]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid_6(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -18.75, -12.5, -6.25, -0.78125, 0.0, 1.5625, 25.0]
    coeffA = [[58.08446815986, 14.14067453466, 1.48680001514, 0.08818505204, 0.0032275634, 7.466101e-05, 1.06632e-06, 8.6e-09, 3e-11, 0.0], [263408.0892154498, 138183.41899690707, 32430.2240106234, 4464.23225295414, 396.86920242577, 23.61058910927, 0.93936598793, 0.02408732686, 0.00036104164, 2.40912e-06], [2455421.7767159413, 1893146.421991412, 666481.0593054731, 139908.13354147237, 19214.10798968472, 1783.48567757811, 111.53659037929, 4.51999529109, 0.10747602321, 0.00114049147], [2084268.1340671494, 988427.0892936762, -114885.67382362302, -202795.6856269563, -63996.01669420194, -8406.36307201847, -42.4775524031, 125.02635179297, 14.37000175638, 0.53536441557], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1712247.0868826217, 1817612.8405394866, -585847.7736612352, 107873.52977035008, -12414.94923907806, 922.7580571126, -44.2495563586, 1.32099540249, -0.02231278394, 0.00016279456], [4194278.912098522, 0.01470934975, -0.00097845568, 3.44121e-05, -6.7492e-07, 7e-09, -3e-11, 0.0, 0.0, 0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus_0(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -14.53125, -13.4375, -12.34375, -11.25, -10.15625, -9.0625, -7.96875, -6.875, -5.78125, -4.6875, -3.59375, -2.5, -1.40625, -0.3125, 0.78125, 1.875, 4.0625, 15.0]
    coeffA = [[216.50722344639, 35.29883556544, 1.91798589049, 0.03471452791], [2055.50147528889, 407.56346747351, 27.063874327, 0.60154808848], [4900.0397541768, 1046.45289243447, 74.90452459883, 1.79587812548], [11472.08809438591, 2654.14458641167, 206.02698058638, 5.36138822731], [26296.09468832056, 6635.37894260311, 562.52870020402, 16.0051370828], [58775.99897485868, 16304.5964463466, 1522.34004878057, 47.77349834938], [127423.35423639054, 39226.76220182843, 4074.70039383195, 142.54500825402], [265961.04334800725, 91890.40398308134, 10751.39405129708, 424.84590412919], [528629.3598911057, 207774.28388533788, 27805.44540558497, 1262.00872058533], [983227.5264598399, 446632.4889272212, 69682.5890122468, 3711.74666890127], [1660767.450522984, 886266.0138986912, 164922.8929899846, 10599.72819780632], [2421726.8897668077, 1529484.2344618044, 346669.1662121743, 27764.0343237273], [2876508.614625285, 2071780.154909041, 563455.9284793288, 56817.42234997382], [2910997.2584912446, 2122558.060007797, 583141.5610020192, 57540.68163907602], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312], [2920059.5717145572, 2043796.9237770513, 610351.4815246533, -66029.58334532483], [2541607.04441311, 2560619.8756725113, 375203.6883951346, -30212.19436996682], [336248.5003030189, 4097792.847804334, 8742.44417996195, -253.63105873492], [7.81637245571, 4194278.3285520542, 0.0183486991, -0.00015955006]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus_1(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -15.625, -13.4375, -12.34375, -11.25, -10.15625, -9.0625, -7.96875, -6.875, -5.78125, -4.6875, -3.59375, -1.40625, -0.3125, 0.78125, 6.25]
    coeffA = [[518.86147335578, 109.51452720085, 8.68334931461, 0.30643314827, 0.00405976985], [5436.06981731152, 1381.12302824657, 132.17194342573, 5.6434564699, 0.09066745335], [17222.98120830886, 4874.60481369116, 520.69647212938, 24.85962056051, 0.44729682298], [37264.26481905287, 11411.33342716291, 1320.52174223294, 68.37207045502, 1.33532571608], [78435.58288523444, 26152.93487558022, 3300.81462350225, 186.65780973771, 3.98604782842], [159796.78626602227, 58440.84059878379, 8108.59477279123, 505.0144472896, 11.89569948463], [313007.09562440135, 126625.42410104693, 19496.20452043168, 1350.89314180032, 35.47444061795], [584074.062951139, 263920.7699176757, 45598.51948064303, 3558.51647972113, 105.55521938832], [1024313.5705268427, 522566.81727465725, 102656.10899466836, 9159.79315495756, 312.01123691356], [1652740.9643681098, 961782.328041911, 217983.35756774893, 22642.8369546946, 904.17147633646], [2370437.449497989, 1579418.7932080366, 417871.9475336128, 51474.61709825949, 2467.9178204046], [2963601.331741663, 2259957.5586076244, 713348.8053038744, 108990.84676594978, 6700.28975299312], [2908289.898935618, 2104958.8516459484, 545483.4731318632, 25635.46161333032, -9281.51855294377], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312, 0.0], [2891388.438580545, 2088408.389763222, 609589.1153853253, -81243.66941446683, 4129.55270399897], [27365.77899544905, 4189972.4468739834, 223.76535690033, -4.73212223684, 0.03521022986]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus_2(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -15.625, -13.4375, -11.25, -9.0625, -6.875, -4.6875, -2.5, -0.3125, 0.78125, 6.25]
    coeffA = [[1894.12485723617, 498.50227010433, 52.60849911548, 2.78175703664, 0.07367378168, 0.00078163101], [17010.56952369148, 5374.60596600781, 682.84167575033, 43.5776181072, 1.39614757895, 0.01795566687], [71972.08970430012, 26288.57037034103, 3870.23665982727, 286.76808129166, 10.68466405909, 0.1600256589], [269223.5547728442, 116199.6357356351, 20295.47153762043, 1789.87231032524, 79.58265755789, 1.42538203651], [844978.6653649877, 443144.7235728793, 94791.16553962637, 10302.26052326674, 567.294037992, 12.63207026607], [2024475.733832817, 1327258.077842914, 361408.21705312515, 50725.01646143635, 3647.45411656206, 106.9620525863], [3020534.8379474785, 2379770.718899766, 811208.9193581154, 147929.28490181145, 14269.454457332, 576.34527953783], [2908169.4207072943, 2103180.324957988, 537550.9278678321, 11432.4404777842, -20052.98859349374, -2897.15607595622], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312, 0.0, 0.0], [2963597.2178164143, 1914549.34446968, 746152.3312524954, -128034.73985113417, 11375.67432435921, -414.52236363691], [45672.40430575876, 4184613.1327571115, 726.14932093014, -25.12695742367, 0.40732878837, -0.00250459975]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus_3(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -13.4375, -11.25, -9.0625, -6.875, -4.6875, -2.5, -0.3125, 0.78125, 6.25]
    coeffA = [[15102.25404007209, 5060.31304820446, 707.68893613913, 52.84438872067, 2.2210691469, 0.04980046896, 0.00046521856], [164866.69312710196, 71594.70172274877, 13069.82478915208, 1282.2545433089, 71.23024933397, 2.12242243291, 0.02648130333], [523454.4276837136, 267269.9349992245, 57655.72565226441, 6711.75642820833, 443.89065168362, 15.79017202443, 0.235729887], [1362053.263558826, 836192.3854343189, 219040.33934183992, 31210.17392474337, 2542.55158373114, 111.96939363862, 2.07764336494], [2615353.514237298, 1951787.8880766511, 635431.6156291334, 114613.34604741701, 11995.62056143841, 686.63973426775, 16.71142866116], [3089901.5905125216, 2501425.990895185, 899194.7765620193, 181525.99478865135, 21414.70635861431, 1379.07841030271, 37.22820316528], [2906964.610740281, 2094657.0561707288, 515939.0238381826, -14423.08603058713, -35884.11113761842, -7690.17931793184, -568.06201386369], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312, 0.0, 0.0, 0.0], [2953710.907660819, 1943255.758217472, 716067.6517078787, -113188.43047838814, 7657.3404071318, 40.66690421107, -21.57934306834], [74480.82008692792, 4174504.1296651214, 1985.94280930249, -98.15104422857, 2.55443023983, -0.0335824564, 0.00017584736]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus_4(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -15.625, -11.25, -6.875, -2.5, -0.3125, 0.78125, 15.0]
    coeffA = [[15757.81593303855, 5759.72491503301, 905.55347107839, 79.3454339308, 4.18274880352, 0.13260826666, 0.00234035841, 1.773244e-05], [205168.65587131513, 96304.8772012941, 19517.20985961454, 2211.04707158271, 151.06628408949, 6.21941347035, 0.14275803778, 0.00140846453], [1467228.3516793065, 944801.7157971155, 265971.63591753587, 42266.93441288048, 4081.7704336218, 238.89791435952, 7.82913186243, 0.11062946303], [3140632.9576840466, 2594090.2017257987, 970089.0499687907, 210914.39086884193, 28523.93339798163, 2378.57646562752, 112.36011851645, 2.3036922521], [2907139.7674294, 2096049.8620280838, 520134.7185811619, -8099.99383224074, -30635.80216367526, -5253.47023968434, 24.73772258755, 58.81301421142], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312, 0.0, 0.0, 0.0, 0.0], [2975395.8656573934, 1880680.6863248579, 781998.1933781243, -146642.4667005737, 16307.88725306385, -1068.85633595843, 38.10393935381, -0.56920718861], [280.41531926683, 4194214.371466575, 6.24526861896, -0.32816577434, 0.01013353037, -0.00018401066, 1.82076e-06, -7.58e-09]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus_5(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -15.625, -11.25, -6.875, -2.5, -0.3125, 0.78125, 15.0]
    coeffA = [[37117.42094724157, 15435.19482808894, 2820.67554395255, 295.69215264008, 19.43914969451, 0.8203138508, 0.02169133597, 0.0003285007, 2.18083e-06], [378530.68970377144, 201082.97287583628, 47162.94315402435, 6370.23913987074, 541.30542093036, 29.60211770029, 1.01654056807, 0.02002687768, 0.00017319454], [2010592.3550519336, 1440059.7625914132, 462496.41690712754, 86610.90334721253, 10304.91827692498, 795.13360704648, 38.75354523142, 1.0884200505, 0.01346290548], [3090485.5201721713, 2497163.4904858326, 889870.7263536351, 173777.2639832934, 17999.98576419832, 507.8910187834, -91.51481944771, -10.16392676549, -0.32789153406], [2907248.438264625, 2097103.224050839, 524186.05761652207, -17.62628847664, -21414.78387979984, 973.71404891601, 2481.95918928771, 581.78885807744, 46.34039805641], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312, 0.0, 0.0, 0.0, 0.0, 0.0], [2994137.1281259544, 1830089.5853434068, 829118.2255293677, -166511.49564854146, 20742.86220011382, -1630.92798880448, 78.75427975241, -2.13173982755, 0.0247529923], [639.65073747574, 4194109.0465828828, 19.37505721456, -1.23786771562, 0.04849552516, -0.00119365566, 1.803976e-05, -1.5318e-07, 5.6e-10]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus_6(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -15.625, -11.25, -6.875, -0.3125, 0.78125, 15.0]
    coeffA = [[79130.25098360976, 36808.9063392886, 7648.81839206592, 931.28990270388, 73.1775908808, 3.84641441723, 0.13518671566, 0.00306236113, 4.055874e-05, 2.3922e-07], [633912.1236476116, 374445.24246676423, 99378.44594834837, 15528.74751511378, 1572.23730554869, 106.83667071225, 4.86753005715, 0.14325809126, 0.00246967313, 1.898898e-05], [2524110.566605242, 1967389.4709873307, 702147.2518336389, 149873.4159187999, 20995.15995895671, 1994.37192646481, 128.06622308467, 5.34668199609, 0.13140942927, 0.0014460877], [2906154.527718283, 2088400.2377449914, 498099.42361057986, -39003.59056324024, -54172.22313659335, -15357.37550887301, -2354.3202464282, -212.340294861, -10.60939886117, -0.22700789407], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2964757.7953209956, 1907921.7751258067, 756467.5010519237, -133617.52071320522, 12377.96866917332, -350.09930318263, -41.94566860248, 4.720386017, -0.19019383753, 0.0028618134], [1535.79766667574, 4193818.905089694, 60.11535233854, -4.49599353926, 0.21216323652, -0.00655396195, 0.00013261296, -1.69601e-06, 1.245e-08, -4e-11]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu_0(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -6.25, -4.0625, -2.96875, -1.875, -0.78125, 0.0006103515625]
    coeffA = [[-7373945.31140335, 1.18651900634, 0.03225883984, 0.00028050488], [-7220494.103643818, 39149.72342543688, 3250.91861084873, 88.19956446491], [-5429502.637769774, 898444.6370217857, 142016.93052709778, 7628.7127272183], [-3369490.435327218, 2394409.410392051, 505669.98969854985, 37225.08214847879], [-1576803.2166885303, 4244866.525322428, 1144994.7150078525, 111133.56712792422], [-272574.1327547517, 6385976.524274871, 2329658.04031578, 331783.54565652227], [-1791.01473871581, 7339202.948399305, 3487231.8133979393, 819585.1594297808], [-3.73e-09, 4406933.143192683, 2.7e-10, -1e-11]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu_1(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -6.25, -4.0625, -1.875, -0.000457763671875, 1.1920928955078125e-06]
    coeffA = [[-7373924.069450833, 4.28867123682, 0.18770776301, 0.00350681088, 2.376506e-05], [-7019795.1703005, 122358.27385747925, 15648.89612400789, 877.66986140327, 18.21919278703], [-4160391.416141265, 1908815.6858152673, 440730.5519966323, 46501.60894118949, 1879.34977026694], [-1105748.3373226451, 5075749.5778309805, 1689187.96444259, 267897.7849738456, 16750.46217012686], [-10.36206336824, 7351260.1261405265, 3549997.2808023253, 985049.3780012389, 125674.0596123936], [-3.47904593086, 7325576.96159995, -174724907.14596164, -195126200089.17944, 0.0], [7.45e-09, 4406933.143192684, 1.6e-10, -0.0, 0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu_2(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -6.25, -1.875, -0.000457763671875, 1.1920928955078125e-06]
    coeffA = [[-7373868.006929829, 14.43059293734, 0.8791466635, 0.02584752486, 0.00036834211, 2.04346e-06], [-6667277.761143491, 305220.9987171115, 52477.39727693058, 4480.11845927544, 189.68325364439, 3.18432047244], [-1049195.5560269996, 5245437.511328395, 1860605.8721340073, 345721.91574605764, 33077.68696538591, 1287.04745975033], [-10.36206336824, 7351260.1261405265, 3549997.2808023253, 985049.3780012389, 125674.0596123936, 0.0], [-3.47904593086, 7325576.96159995, -174724907.14596164, -195126200089.17944, 0.0, 0.0], [7.45e-09, 4406933.143192684, 1.6e-10, -0.0, 0.0, 0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu_3(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -0.78125, 0.0006103515625]
    coeffA = [[-7242878.650784744, 34802.74387516298, 3495.18663047077, 172.74321540219, 4.4957457518, 0.05910459991, 0.00030948919], [-107949.39328486205, 6984325.185634386, 3133434.299905584, 818639.7885683649, 127485.62793001306, 10933.01450971818, 395.966305972], [-1791.01473871581, 7339202.948399305, 3487231.8133979393, 819585.1594297808, 0.0, 0.0, 0.0], [3.73e-09, 4406933.143192685, 8e-11, 1e-11, -0.0, 0.0, 0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu_4(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -0.01220703125, 9.5367431640625e-06]
    coeffA = [[-7163376.469498109, 66877.92101113992, 8395.110672153, 544.9072960169, 19.94628852332, 0.41546232692, 0.00459439767, 2.094188e-05], [-122.20832965811, 7363300.339038028, 3632884.3965975423, 1141385.7616600743, 240079.4962364385, 32543.70873567899, 2542.37489957494, 86.16372329684], [-28.1563848176, 7359328.190070127, 1666941.0941231498, -81549371.41917102, 0.0, 0.0, 0.0, 0.0], [7.45e-09, 4406933.143192684, 1.6e-10, -0.0, 0.0, 0.0, 0.0, 0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu_5(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -0.01220703125, 9.5367431640625e-06]
    coeffA = [[-7047235.328589864, 120376.98936922404, 18132.42470344847, 1465.25933863147, 69.91528540996, 2.03028467739, 0.03525325028, 0.00033644209, 1.35745e-06], [-122.20832965811, 7363300.339038028, 3632884.3965975423, 1141385.7616600743, 240079.4962364385, 32543.70873567899, 2542.37489957494, 86.16372329684, 0.0], [-28.1563848176, 7359328.190070127, 1666941.0941231498, -81549371.41917102, 0.0, 0.0, 0.0, 0.0, 0.0], [7.45e-09, 4406933.143192684, 1.6e-10, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu_6(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -0.78125, 0.0006103515625]
    coeffA = [[-7371193.569853705, 826.03989601819, 107.57622029938, 8.01829800138, 0.37710879878, 0.01161217833, 0.00023427654, 2.98854e-06, 2.189e-08, 7e-11], [-101849.68613030242, 7021769.437038267, 3209610.46509176, 888673.6556500515, 160266.64523118915, 19167.7117057247, 1503.07976773977, 74.080220518, 2.07722880343, 0.02523921464], [-1791.01473871581, 7339202.948399305, 3487231.8133979393, 819585.1594297808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3.73e-09, 4406933.143192685, 8e-11, 1e-11, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru_0(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -12.5, -6.25, -3.125, -1.5625, -0.390625, 0.0, 0.1953125, 0.390625, 1.5625, 3.125, 6.25, 25.0]
    coeffA = [[-4154154.846343954, 2991.90764764803, 76.02097307144, 0.63794082531], [-3923615.7315524467, 59882.59777200597, 4857.70786342582, 137.10850203102], [-3220334.8868596507, 422031.0312019473, 67562.6682601325, 3779.54060955928], [-1488425.0302973094, 2159714.4988516634, 655284.3503458574, 70662.91396949513], [155511.08228710218, 5258201.155210086, 2635750.4073865917, 499969.0443284828], [0.0, 4205441.769283423, 168688.48232847924, -1525388.5901357953], [0.0, 4195092.280718264, -24362.30165239546, -1935570.2356769072], [-8461.33352222222, 4312458.34597946, -579964.0305999471, -1031909.4034456145], [-155511.08228710594, 5258201.1552101, -2635750.4073866038, 499969.044328486], [1488425.030297294, 2159714.4988516835, -655284.350345866, 70662.91396949628], [3220334.8868596326, 422031.0312019588, -67562.66826013486, 3779.54060955944], [4036762.040445542, 23424.02390007437, -1188.50586568061, 19.92839228712], [4176768.216342681, 974.91903293522, -19.85398299389, 0.14048950965]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru_1(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -12.5, -6.25, -3.125, -1.5625, -0.390625, 0.0, 0.1953125, 0.78125, 1.5625, 3.125, 6.25, 25.0]
    coeffA = [[-4136492.8013102734, 5910.10918390663, 236.89630454564, 4.22277169106, 0.02786616981], [-3796435.2957441816, 117807.62780072205, 14499.42984749414, 832.82617992841, 18.39869825775], [-2807685.3163574003, 798139.8913233284, 192846.80182170816, 21870.40659702236, 957.37260735058], [-722936.897180694, 3557998.8478930253, 1588821.1435331705, 340820.7412259461, 28648.59380236196], [156823.5953216876, 5277796.988317177, 2699680.161553883, 565234.4700496353, 20500.97208179926], [0.0, 4205441.769283423, 168688.48232847924, -1525388.5901357953, 0.0], [0.0, 4195092.280718264, -24362.30165239546, -1935570.2356769072, 0.0], [-6431.43722458842, 4265109.379130056, -234559.26115954813, -2022472.959954847, 977243.2609658327], [-321628.03185789293, 5929083.763854684, -3621293.705092417, 1122086.1256210809, -142474.4484053833], [722936.8971806379, 3557998.847893097, -1588821.1435331956, 340820.7412259467, -28648.59380236134], [2807685.316357379, 798139.8913233393, -192846.801821709, 21870.40659702206, -957.37260735054], [3968395.0198612185, 46021.61902419409, -3680.85478300667, 131.03557156062, -1.72775541847], [4168267.2706932235, 1942.68342288455, -60.11751178071, 0.86667442294, -0.00480025057]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru_2(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -1.5625, -0.390625, 0.0, 0.1953125, 1.5625, 6.25]
    coeffA = [[-4012542.096584223, 31770.53965584714, 2186.32787976553, 71.89993936199, 1.12818750866, 0.00678998569], [-1171935.407383768, 2808804.473016107, 1154318.3480841839, 245488.96377811505, 26292.87217053757, 1121.04398916206], [76488.4730160534, 4737819.565256781, 1354577.0889307815, -989666.1586643229, -821052.0109008108, -172350.05091483882], [0.0, 4205441.769283423, 168688.48232847924, -1525388.5901357953, 0.0, 0.0], [0.0, 4195092.280718264, -24362.30165239546, -1935570.2356769072, 0.0, 0.0], [-16759.01378700511, 4357676.067170705, -456492.01750692417, -1988432.018924645, 1348184.0994081332, -278683.6102262892], [1171935.4073837067, 2808804.4730162146, -1154318.3480842488, 245488.9637781314, -26292.87217053936, 1121.04398916213], [4012542.0965843564, 31770.53965582645, -2186.32787976567, 71.899939362, -1.12818750866, 0.00678998569]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru_3(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -1.5625, -0.390625, 0.0, 0.1953125, 1.5625, 6.25]
    coeffA = [[-3962281.7090388006, 49633.09653431596, 4453.84239783524, 206.20549070786, 5.15131263037, 0.06590176337, 0.00033857111], [-675011.9360241428, 3803169.3061893615, 1935690.8053073324, 554243.2969406402, 91271.17540232006, 8066.53276884271, 296.34085459969], [4442.2321118717, 4179781.013269977, -347625.3828553787, -3619402.56917318, -3003709.646543257, -1099753.1292956995, -158276.79204366758], [0.0, 4205441.769283423, 168688.48232847924, -1525388.5901357953, 0.0, 0.0, 0.0], [0.0, 4195092.280718264, -24362.30165239546, -1935570.2356769072, 0.0, 0.0, 0.0], [5757.77699165966, 4103459.7755460786, 572114.2156564617, -3954763.8164542136, 3273865.680852176, -1211515.088069338, 176892.48765024784], [675011.9360224073, 3803169.3061929746, -1935690.8053103061, 554243.2969418785, -91271.17540259619, 8066.53276887406, -296.34085460111], [3962281.7090388015, 49633.09653431588, -4453.84239783524, 206.20549070786, -5.15131263037, 0.06590176337, -0.00033857111]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru_4(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -0.78125, -0.390625, 0.0, 0.1953125, 3.125, 25.0]
    coeffA = [[-3905870.9911277774, 72823.29707162436, 8071.56879660451, 486.30937128399, 16.9721254754, 0.34230581119, 0.00370038835, 1.658936e-05], [386105.6440711103, 6243483.227793055, 4220601.110059901, 1685371.901349202, 412183.27530333074, 60471.00600459117, 4876.72539934794, 165.9634841498], [-2991.06391131809, 4153303.613433672, -234190.31999210297, -2799749.886997853, -1084585.8151395349, 1125670.7863979514, 1142161.5425540882, 307112.6644935738], [0.0, 4205441.769283423, 168688.48232847924, -1525388.5901357953, 0.0, 0.0, 0.0, 0.0], [0.0, 4195092.280718264, -24362.30165239546, -1935570.2356769072, 0.0, 0.0, 0.0, 0.0], [-10077.89744255109, 4280666.3674772475, -119193.29688221683, -2756296.219609587, 2292004.8032386526, -871544.1393943327, 164767.42294261436, -12502.34997821432], [3151539.768286787, 516972.0242468465, -113361.02455665157, 13567.65018038728, -942.82261695367, 37.91569323919, -0.81798454959, 0.00732268063], [4133311.6931253397, 7994.2569344578, -501.23498533919, 18.46814641219, -0.42174898811, 0.00589488933, -4.634915e-05, 1.574e-07]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru_5(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -0.78125, -0.390625, 0.0, 0.1953125, 3.125, 25.0]
    coeffA = [[-3843623.0141199403, 101927.91219815022, 13453.5397778604, 1002.68041859518, 45.38429856523, 1.27117950877, 0.02151234624, 0.00020146235, 8.0132e-07], [483985.91366978385, 6626835.061919931, 4815720.021420626, 2163474.185394226, 631325.3539689864, 119820.70493117426, 14256.73007369915, 964.89071151447, 28.31488337015], [484.18045225795, 4203992.974951093, 86125.27039983885, -1654355.6752936812, 1450502.9712779135, 4682347.483522914, 4231619.058117518, 1826542.947897882, 324013.7159236249], [0.0, 4205441.769283423, 168688.48232847924, -1525388.5901357953, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 4195092.280718264, -24362.30165239546, -1935570.2356769072, 0.0, 0.0, 0.0, 0.0, 0.0], [7062.1100355472, 4077626.6803746927, 750906.0899701833, -4521222.294933034, 4206740.639816131, -2046470.905291657, 573260.1546527185, -87496.00887486474, 5646.58137575233], [2944679.5123901996, 710698.3492743674, -185123.2481792418, 27359.32298883273, -2462.60054911051, 137.40348991643, -4.63731889007, 0.08667309149, -0.00068838264], [4118273.9555363394, 11396.97144136038, -835.16916000414, 37.03307884594, -1.06130140746, 0.01987653108, -0.00023580228, 1.6124e-06, -4.85e-09]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru_6(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -0.390625, 0.0, 0.1953125, 3.125, 25.0]
    coeffA = [[-3792462.3407506994, 129690.65894505502, 19610.5919906783, 1735.37503030773, 97.19873789159, 3.54587221699, 0.08400068272, 0.00124520561, 1.048588e-05, 3.826e-08], [150175.74315448073, 5198664.847368735, 2374042.943607861, -46829.79287337251, -551144.9137125906, -272660.52323056175, -67429.62048390399, -9406.30376090958, -705.88975860687, -22.21307731119], [0.0, 4205441.769283423, 168688.48232847924, -1525388.5901357953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 4195092.280718264, -24362.30165239546, -1935570.2356769072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [12444.06495922435, 4010626.705094753, 1065967.8383151577, -5268228.567503046, 5209812.303804437, -2853976.5545407096, 970023.9851748167, -203905.98731494593, 24367.75119141648, -1268.97445496555], [2725986.367168735, 940320.1564458843, -283416.91430482804, 49927.80975409117, -5546.15079300912, 399.58272765171, -18.62608616262, 0.54178034343, -0.00893538037, 6.37825e-05], [4101347.159406191, 15706.31876435506, -1319.06991494531, 68.49041541114, -2.36605729499, 0.05568659942, -0.00088621846, 9.15192e-06, -5.547e-08, 1.5e-10]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis_0(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.1391611516113281, 0.14648537011718749, 0.16113380712890624, 0.175782244140625, 0.2050791181640625, 0.2343759921875, 0.292969740234375, 0.35156348828125, 0.468750984375, 0.7031259765625, 0.93750096875, 1.406250953125, 1.8750009375, 2.343750921875, 2.81250090625, 3.750000875, 4.218750859375, 4.68750084375, 5.156250828125, 5.6250008125, 6.093750796875, 6.56250078125, 7.031250765625, 7.50000075, 7.968750734375, 8.43750071875, 8.906250703125, 9.3750006875]
    coeffA = [[-2.966913e-05, 29.67026502774, -1138.5005343601, 8212.21826169442], [-1389.15838954772, 31906.20574707305, -245906.0406183247, 636533.9345966389], [-2868.05347285567, 61840.69612243304, -447897.596678949, 1090918.740823594], [-6234.97395981798, 124390.69190370438, -835342.5260680659, 1891087.4861707115], [-14499.33934197532, 262942.5902278024, -1609868.4011375431, 3334830.4863792723], [-29443.8771932319, 482034.0543567166, -2681186.64772996, 5082097.7751971055], [-40146.46920970925, 620862.317506422, -3281589.4907107204, 5947820.062008208], [14126.09086351866, 76829.47364012715, -1462513.0756909559, 3918825.083841271], [246474.52800820427, -1842993.8551176111, 3831890.144615398, -955050.9267755613], [541947.6749099426, -3786054.3162814686, 8096340.232114399, -4078220.0821580123], [-374006.98210367566, 41505.58776578098, 2751470.730553884, -1583720.651004218], [-2211785.2621569885, 5839592.020495168, -3367091.667945862, 576194.1594269967], [-1899231.5712549812, 5361136.280302097, -3162399.4828233966, 560187.8768197148], [607432.2726058598, 1330038.9613797367, -997433.9041033839, 171892.61760375093], [2729221.3894795207, -1424736.2021253167, 196085.61179317208, -655.09433844658], [3548367.8135305652, -2321458.6242659874, 523362.3784178864, -40476.7534397703], [2712887.5673664305, -1643180.195035696, 339640.01692646684, -23874.07550273762], [1946441.090940505, -1096842.9303873992, 209777.5109930402, -13580.90144229478], [1291617.326964113, -676345.9612780043, 119742.30042172185, -7152.96596068337], [807927.2810322671, -393893.7518176126, 64749.0056109176, -3583.03223180893], [482397.277036652, -219630.77028538325, 33647.02027976904, -1732.32015958463], [277362.7012169172, -118319.51719890076, 16957.52346072251, -815.71378482223], [154559.53648589895, -61979.9951407358, 8340.42927396834, -376.32207824308], [83880.9843391847, -31719.4545247616, 4021.25131223484, -170.7991559519], [44503.70832733478, -15916.01958365975, 1906.85873532261, -76.49137188456], [23152.67080994726, -7852.19174996879, 891.57834015772, -33.87732331055], [11839.5698291021, -3817.34399324565, 411.85562550561, -14.86344667119], [5963.06624546714, -1832.01531157014, 188.26201647547, -6.46885484297], [27.75929122028, -3.95289103335, 0.17780898567, -0.00256298694]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis_1(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.14648537011718749, 0.175782244140625, 0.2343759921875, 0.35156348828125, 0.468750984375, 0.93750096875, 1.8750009375, 2.81250090625, 4.68750084375, 5.6250008125, 6.56250078125, 7.50000075, 8.43750071875, 9.3750006875]
    coeffA = [[-3.76986e-06, 3.76997266924, -115.99778441945, 881.63385732906, 0.0], [1081.44890308131, -36372.48014037528, 461274.51736970973, -2616752.4729524194, 5608821.475496719], [4817.51037592144, -137931.29789547363, 1498457.144980657, -7333208.442629924, 13666526.340092681], [4797.06130800926, -145068.96214311194, 1621486.9305696506, -8025651.552925049, 14959637.724940857], [-85176.58203202933, 1296860.8576165247, -7073896.941815233, 15370559.459322885, -8750136.53904917], [-79897.84277248883, 1381235.0013897996, -8061140.730865777, 18458362.055621576, -11832908.981557794], [874247.8028074881, -6070636.939251488, 13928023.825389998, -10630103.41818287, 2735004.8809206644], [-2397655.1623390843, 6371109.203315468, -3894705.651696122, 780539.6723229192, -22110.39378052662], [-1030190.6678381236, 4530994.105566386, -3335986.7595848385, 928673.8130784504, -91527.17236933637], [4257788.857672036, -3189640.986255052, 919937.1149759737, -120618.59282083157, 6046.20365687008], [2381634.2808185974, -1567866.4819735219, 393038.3705952084, -44368.47793519608, 1899.3972985277], [1044741.7189867033, -605749.5131040326, 133028.75991767427, -13096.67313971696, 487.13375784582], [383180.03853790805, -197217.47375171032, 38331.14053324113, -3331.40585591514, 109.15896031321], [124314.96427032384, -57351.40960067204, 9972.37297896834, -774.13193496283, 22.62474446329], [36712.3631664074, -15329.99637952191, 2409.85553785589, -168.95208101877, 4.45568232193], [73.23007112139, -14.77194594175, 1.06700637475, -0.03296802735, 0.00037007322]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis_2(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.175782244140625, 0.2343759921875, 0.35156348828125, 0.468750984375, 0.93750096875, 1.8750009375, 2.81250090625, 3.750000875, 5.6250008125, 6.56250078125, 7.50000075, 8.43750071875, 9.3750006875]
    coeffA = [[-3.76986e-06, 3.76997266924, -115.99778441945, 881.63385732906, 0.0, 0.0], [-1102.76107092129, 47083.94327807153, -811877.5007545314, 7076395.972381662, -31222249.072667167, 55875464.00456035], [16485.69448654134, -433597.5472448151, 4461518.008720425, -21959688.53179714, 49036297.69599407, -33232696.020973142], [-2713.20889977271, -145453.94505159333, 2954456.059243487, -19277722.667765398, 50739668.14688681, -40611569.398523845], [-267625.87293416186, 3693488.527980232, -19423490.720814794, 46303215.0134002, -45863842.2078339, 16594091.344556797], [653834.0663491588, -4388004.055190056, 8882898.949881207, -3203061.259274539, -2635955.741393306, 1527737.7884925168], [-973935.7954952853, 936785.9530239288, 4252306.490735907, -5216165.091439598, 2146188.1119019687, -308380.0229061161], [-3968072.076522052, 10928250.820803618, -8878935.73555414, 3317674.0723759877, -603741.386369944, 43708.92906927002], [2176226.6562638064, -120806.04563081673, -883059.3244651182, 407191.0654305924, -70963.47205380247, 4481.42226943807], [5036296.805198573, -4179172.7097503296, 1419517.6989082978, -245920.5854260697, 21667.26123006844, -774.72564507357], [2290411.5848226035, -1630876.6983316154, 470230.0149690829, -68514.29586784323, 5037.58587434444, -149.3481524883], [993684.3754992991, -632322.2520575767, 162301.1030089926, -20982.31051710514, 1365.03197382797, -35.7226062722], [370333.31093903456, -212037.25488791845, 48856.07684726069, -5658.72825457665, 329.26834868629, -7.69615249405], [123494.46135961328, -64130.92901513538, 13382.34685607333, -1401.97610833828, 73.70685310669, -1.55511388778], [200.23358105512, -52.06144954169, 5.21647414676, -0.25307212147, 0.00596432368, -5.478896e-05]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis_3(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.175782244140625, 0.2343759921875, 0.468750984375, 0.93750096875, 1.8750009375, 3.750000875, 5.6250008125, 7.50000075, 9.3750006875]
    coeffA = [[-3.76986e-06, 3.76997266924, -115.99778441945, 881.63385732906, 0.0, 0.0, 0.0], [-1394.99354220465, 59347.28465605492, -1025243.6804988334, 9046544.094473274, -41405280.26337659, 83812108.17215157, -31785476.9909271], [-2534.28295578745, 128641.74556218075, -2449101.0310443253, 23247823.16037453, -116972054.0888226, 291223221.94802576, -263683532.53738448], [29430.6286553609, -884363.3459733366, 9922869.399676941, -53843794.67782396, 145982610.65934747, -178975908.81302384, 82871684.32550052], [20374.92057828813, 1346707.4603102605, -12481898.790891593, 38734670.033053875, -48396218.50883563, 27852704.87658364, -6239983.532014641], [873480.426362891, -7426108.518711692, 19831039.847721804, -20506520.521454174, 10488267.853694879, -2707897.871674732, 284387.10784328665], [-4717998.370926675, 13056227.164560307, -11362137.357048104, 4844681.667337007, -1126109.3457453507, 138035.3088998428, -7029.05526950078], [5846396.047004766, -5237612.128237029, 1993317.743596979, -411135.19845224265, 48315.78066705656, -3057.8647767813, 81.1782656272], [3158692.3096302664, -2510954.785251632, 841303.77181574, -151825.69741299396, 15542.53720677361, -854.72474013276, 19.70564633307], [605906.0811974547, -393909.21456369886, 107294.33678940918, -15662.0190883406, 1291.40979446399, -56.99916178985, 1.05159310097], [529.52291226794, -168.88068288986, 21.76478385262, -1.45379494359, 0.0532056982, -0.00101395876, 7.87879e-06]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis_4(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.175782244140625, 0.2343759921875, 0.468750984375, 0.93750096875, 1.8750009375, 3.750000875, 5.6250008125, 7.50000075, 9.3750006875]
    coeffA = [[-3.76986e-06, 3.76997266924, -115.99778441945, 881.63385732906, 0.0, 0.0, 0.0, 0.0], [1189.69143608571, -66719.09628031954, 1600816.349241247, -21239052.86063748, 167441421.05231413, -777361842.0797565, 1934359111.878515, -1917395495.8381593], [-14739.18478165827, 549779.6159864572, -8666132.938664222, 74147710.8811605, -366576065.4930369, 1024368538.596475, -1457978914.1781268, 832369040.030182], [109297.74259458965, -2573570.3579873354, 25078904.153584085, -128628118.11968772, 365179271.0658124, -560683800.687356, 448613765.27045345, -148790289.45331812], [-526480.6558164876, 7114817.704853628, -38285882.3529562, 102210557.05479373, -141146556.1624712, 108374132.91766974, -44706722.62139482, 7802811.419914292], [2167611.5389570794, -14253260.15885121, 35106486.586205296, -39300431.60239101, 24223134.568050377, -8671650.317235887, 1709307.7606730687, -144560.95755659597], [-6292559.2704700725, 17213230.05018395, -16017918.385988954, 7712405.261964882, -2175402.2061327863, 366148.94171729014, -34317.4061031513, 1386.07451634564], [4966898.414977578, -3903286.802795947, 1128751.5376756398, -100993.06683018396, -18209.57617344874, 5474.97124839672, -524.8218654768, 18.38396495044], [5167862.877046898, -4674692.536735177, 1838225.8221659781, -406563.4105895362, 54530.21770929403, -4428.82704370311, 201.42113803666, -3.95277545637], [1348185.1393716494, -1013098.8467104238, 328425.9621426779, -59490.25542593351, 6498.05479413861, -427.73456332592, 15.7020087276, -0.24786369841], [1349.57266824687, -508.10861231825, 79.95059393275, -6.82241828496, 0.34138110947, -0.01003067335, 0.00016048661, -1.08023e-06]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis_5(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.2343759921875, 0.468750984375, 1.8750009375, 3.750000875, 5.6250008125, 7.50000075, 9.3750006875]
    coeffA = [[-3.76986e-06, 3.76997266924, -115.99778441945, 881.63385732906, 0.0, 0.0, 0.0, 0.0, 0.0], [2999.38930455002, -164347.4258294474, 3896815.9740877924, -51986932.509138286, 423928835.19806445, -2142165978.8247316, 6458923775.287231, -10462513891.787481, 7039827521.167842], [84787.1705967011, -1984958.8449480934, 18956293.46063842, -92595852.00548676, 233938387.9599534, -257678045.4368556, 15463484.765748015, 201825953.58682755, -123077005.19761957], [371695.1348409522, -1420518.6190795975, -4195096.551894372, 28054521.16064449, -46432775.61611703, 37806323.168477744, -17027158.777178854, 4091403.5399312833, -411623.623960274], [-6011943.09553919, 16386142.86138315, -14961377.728278242, 6948239.033773908, -1833049.6498332277, 268840.3664613186, -17176.50661190595, -325.19918136033, 74.15549138211], [2238428.5628988906, 852577.111746373, -2485968.349140273, 1463740.5011195503, -440148.1954710841, 78053.57075794996, -8302.11366418646, 493.06644589902, -12.63467354653], [7183419.609949505, -7160446.809055351, 3177208.636560255, -818025.196237299, 133423.61502982475, -14094.00867954907, 940.243353636, -36.1720208245, 0.61369987841], [2594641.6892603226, -2203220.534270618, 825073.1849592646, -177802.87798595737, 24095.8810224392, -2101.26046646883, 115.07131607849, -3.61609244463, 0.04989969427], [3274.93083927624, -1421.2026480036, 264.16122479218, -27.48073628919, 1.751183994, -0.07005559498, 0.00171984163, -2.371449e-05, 1.4077e-07]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis_6(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.2343759921875, 0.468750984375, 1.8750009375, 3.750000875, 7.50000075, 11.250000625]
    coeffA = [[-3.76986e-06, 3.76997266924, -115.99778441945, 881.63385732906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2994.60119895981, -164754.78881507227, 3922810.0216139155, -52574764.94248238, 431149172.32796526, -2196233766.3286734, 6713723239.981669, -11203013349.996048, 8255395220.060384, -863896187.3526937], [5160.97548230179, 192285.62903706517, -7278577.777860985, 90245768.09216626, -578357295.7385416, 2128082682.3715403, -4617554221.884975, 5938952283.270541, -4234523757.383838, 1299416553.9404624], [-278172.0758180474, 4932077.215449626, -30833147.70952822, 90956835.87112312, -138698216.3526861, 125114457.23137271, -70423722.33443446, 24485390.920237456, -4834730.303042706, 415887.1130351295], [-4341325.134919816, 10704169.671737675, -6444998.521111922, -435100.5132866476, 2247468.947441889, -1222157.074710976, 343062.98809158825, -55829.97797459294, 5023.78448538989, -194.6719849227], [3959653.430258565, -1940997.801967708, -542053.1637640283, 714415.8892956282, -269229.60817138373, 55914.71926170459, -7118.29626300876, 556.23870259181, -24.63280170578, 0.47535621491], [2621367.5310228225, -2295327.3082079967, 898355.1092532218, -206085.63250605608, 30514.18082613832, -3022.10127913838, 200.08437245853, -8.53487872264, 0.2127505958, -0.00236029669], [740.32881007073, -339.24355697447, 68.28840170362, -7.92568369734, 0.58455172073, -0.02841681193, 0.00091074082, -1.856128e-05, 2.1835e-07, -1.13e-09]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



from mpc_nonlinear import *

@types.vectorize
def tanh(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -3.125, -0.78125, 0.0, 0.78125, 3.125, 12.5]
    coeffA = [[-4194173.072630944, 16.68433970131, 0.86727673568, 0.0183454618, 0.00013652433], [-3608817.0721267513, 445247.40056726034, 126867.3897902733, 16019.69475278112, 755.41149052651], [443310.5643031813, 6149706.701032153, 3217043.811996814, 775435.898513988, 71768.61553282502], [0.0, 4190305.9629493374, -62045.54025988182, -1703769.7238742444, -648313.0282751756], [-0.0, 4190305.9629493523, 62045.54025979681, -1703769.723874092, 648313.0282750876], [-443310.56430317473, 6149706.701032141, -3217043.81199681, 775435.8985139898, -71768.61553282566], [4045268.042423117, 76088.81124167377, -13754.89484578199, 1054.42721732424, -29.17683277022], [4194279.0022553257, 0.00015393431, -7.02959e-06, 1.3549e-07, -9.4e-10]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -15.625, -11.25, -6.875, -2.5, -0.3125, 1.875, 15.0]
    coeffA = [[15757.81593303855, 5759.72491503301, 905.55347107839, 79.3454339308, 4.18274880352, 0.13260826666, 0.00234035841, 1.773244e-05], [205168.65587131513, 96304.8772012941, 19517.20985961454, 2211.04707158271, 151.06628408949, 6.21941347035, 0.14275803778, 0.00140846453], [1467228.3516793065, 944801.7157971155, 265971.63591753587, 42266.93441288048, 4081.7704336218, 238.89791435952, 7.82913186243, 0.11062946303], [3140632.9576840466, 2594090.2017257987, 970089.0499687907, 210914.39086884193, 28523.93339798163, 2378.57646562752, 112.36011851645, 2.3036922521], [2907139.7674294, 2096049.8620280838, 520134.7185811619, -8099.99383224074, -30635.80216367526, -5253.47023968434, 24.73772258755, 58.81301421142], [2907253.9872010085, 2096968.6571959453, 524599.8354218531, 1187.52334286206, -25669.06806947992, 3830.00394616183, 0.0, 0.0], [2908500.479389696, 1969726.851853387, 736479.2402663906, -134737.43578511913, 14565.87187416114, -925.49724889377, 31.93145224519, -0.46135126439], [280.41531926683, 4194214.371466575, 6.24526861896, -0.32816577434, 0.01013353037, -0.00018401066, 1.82076e-06, -7.58e-09]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.625, -12.5, -9.375, -6.25, -3.125, 0.0, 3.125, 12.5]
    coeffA = [[72.69609768235, 14.02871514157, 1.10119227061, 0.04502288064, 0.00101202505, 1.187192e-05, 5.686e-08], [62183.23932408683, 24162.7089936723, 3936.64766420814, 343.91636561591, 16.97966378348, 0.44890860069, 0.00496242991], [366372.52466398466, 176582.27638259606, 35861.09778386994, 3920.85427294143, 243.0449521177, 8.08850285801, 0.11278589921], [1473611.6905421386, 920133.7877163024, 245243.7997642538, 35554.62701525312, 2946.08951933399, 131.88174884064, 2.48546387762], [2649827.1136657535, 2012321.7826827748, 670939.6083058974, 124691.5200608887, 13518.50984746394, 805.06700412267, 20.45244483641], [2097139.5017196543, 1043420.4676375714, -25001.64790642642, -130770.50023525405, -34420.6289249811, -2939.50873439432, 0.0], [2097139.5017196543, 1043420.4676375696, 25001.64790643196, -130770.50023525902, 34420.62892498288, -2939.50873439454, 0.0], [2088462.4229224704, 1401937.5147488818, -393720.19593763986, 59218.61614632136, -5000.71177635971, 223.83202401533, -4.13700455794], [4193457.5972299566, 170.78125838207, -14.1698123814, 0.60276617445, -0.01392155111, 0.00016617755, -8.0382e-07]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def elu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -4.0625, -1.875, 0.0048828125]
    coeffA = [[-4166886.775679643, 4310.72230492873, 223.98189825116, 4.73670272533, 0.0352443172], [-2366414.3286567335, 1085726.8794837939, 250685.81030027888, 26449.9328782138, 1068.96678222715], [-628945.3197064765, 2887066.4627975705, 960803.4925133971, 152379.2099267097, 9527.59722011256], [13.10292228033, 4181718.687517288, 2020035.8324430503, 560899.5487509469, 71627.72245522267], [7.45e-09, 4194279.003439311, -4e-10, 2e-11, -0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -6.25, -4.0625, -1.875, -0.00152587890625, 1.1920928955078125e-06]
    coeffA = [[-7373924.069450833, 4.28867123682, 0.18770776301, 0.00350681088, 2.376506e-05], [-7019795.1703005, 122358.27385747925, 15648.89612400789, 877.66986140327, 18.21919278703], [-4160391.416141265, 1908815.6858152673, 440730.5519966323, 46501.60894118949, 1879.34977026694], [-1105748.3373226451, 5075749.5778309805, 1689187.96444259, 267897.7849738456, 16750.46217012686], [-34.66158620141, 7351034.093570704, 3549543.499784269, 984730.4577534673, 125600.7203665556], [-3.50667680805, 7348603.8232252365, -47740479.84666813, -39678765364.8523, -10406750299532.65], [0.0, 4406933.143192686, 0.0, 0.0, 0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def gelu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -3.75, -2.5, -1.25, 0.0, 0.3125, 1.25, 2.5, 5.0]
    coeffA = [[-2846.29456290974, -685.23146359561, -50.0054887914, -1.14298260094], [-1916307.361618036, -1581903.5338090858, -437553.98210765066, -40511.57103758872], [-1203980.5555027295, -383499.9956227352, 188181.32542370155, 63626.90145651568], [0.0, 2146329.5646905424, 1950968.8688592135, 471204.06202182453], [1e-11, 2095601.9893701745, 1704585.4234277843, -170739.15500447794], [17204.83322366532, 1960869.5620745495, 2068055.4170300204, -517951.05409748835], [-1203980.555502751, 4577778.999062077, 188181.325423685, -63626.901456513], [-1099094.957902926, 4986962.37709154, -188109.03522665496, 14707.22407252014], [-4.31966047903, 4194279.978923079, -0.06835506716, 0.00151900149]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_sign(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -12.5, -3.125, -0.78125, 0.0, 0.78125, 3.125, 12.5]
    coeffA = [[3287563.138827128, -84802.80946006758, -4092.57764072737, -106.27482574972, -1.40860799004, -0.00747272143], [1691893.7527093443, -810445.6534534493, -145865.20293252857, -14569.88331949528, -754.13051151922, -15.75207334766], [222779.9350638218, -3080355.18180561, -1680218.1873907023, -573767.1382234013, -108055.05543248384, -8495.72917405257], [0.0, -4190476.3608063944, -4107730.8571141902, -3589374.0829256466, -2236861.6382736634, -668967.9665865166], [-1.7e-10, 4190476.3608063953, -4107730.857114143, 3589374.082925427, -2236861.638273325, 668967.9665863442], [222779.935063806, 3080355.181805663, -1680218.187390766, 573767.1382234343, -108055.0554324912, 8495.72917405312], [1691893.7527093245, 810445.6534534696, -145865.20293253497, 14569.88331949613, -754.13051151927, 15.75207334766], [3287563.138827105, 84802.8094600715, -4092.57764072763, 106.27482574973, -1.40860799004, 0.00747272143]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def isru(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -1.5625, 0.0, 0.390625, 1.5625, 6.25]
    coeffA = [[-4012542.096584223, 31770.53965584714, 2186.32787976553, 71.89993936199, 1.12818750866, 0.00678998569], [-1171935.407383768, 2808804.473016107, 1154318.3480841839, 245488.96377811505, 26292.87217053757, 1121.04398916206], [0.0, 4206613.539473028, 13613.33195397695, -2561819.1292417627, -1686943.8743115417, -353183.8947604818], [-0.0, 4193973.7254556324, 9990.69879145321, -2203353.387211422, 484272.926506274, 698180.9178010793], [-76488.47301605865, 4737819.565256812, -1354577.0889308508, -989666.1586642445, 821052.0109007667, -172350.05091482907], [1171935.4073837067, 2808804.4730162146, -1154318.3480842488, 245488.9637781314, -26292.87217053936, 1121.04398916213], [4012542.0965843564, 31770.53965582645, -2186.32787976567, 71.899939362, -1.12818750866, 0.00678998569]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def snormal_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-10.0, -6.25, -5.0, -3.75, -2.5, -1.25, 0.0, 1.25, 2.5, 3.75, 5.0, 6.25]
    coeffA = [[331.03480203434, 282.83330236082, 103.2218734542, 20.8591591703, 2.52073411727, 0.18216398527, 0.0072892399, 0.00012459125], [1016735.8092646737, 1204986.081093367, 612714.0125857604, 173254.4375527027, 29419.43789307512, 2999.58210646753, 170.0185946801, 4.13235111648], [8359191.832661943, 11700770.825925717, 7062739.246839453, 2382021.957825643, 484577.8140615008, 59434.9181490288, 4067.99311153252, 119.81407808661], [477938.4745855105, -4071940.9306818643, -6490229.555362781, -4099689.298635237, -1378739.5931772164, -262526.5588669827, -26890.80291443462, -1158.03871038332], [1675425.9556886724, 78051.93818896344, -515874.7062512928, 586159.5878238021, 799093.9871430424, 339974.0995483951, 65250.77666789299, 4863.09177627857], [1673275.2445434276, 476.64872737442, -830431.5181163825, 29536.97353150892, 275248.6548322683, 73188.4227728798, 0.0, 0.0], [1673275.2445434276, -476.64872737597, -830431.5181163868, -29536.97353148992, 275248.6548322495, -73188.42277287404, 0.0, 0.0], [1675425.9558102768, -78051.93867884994, -515874.70541304094, -586159.5886138453, 799093.9875861628, -339974.0996963546, 65250.77669513307, -4863.09177841205], [477938.48932427465, 4071940.896813153, -6490229.522138587, 4099689.2806017506, -1378739.5873286966, 262526.5577337911, -26890.80279298889, 1158.03870483019], [8359192.127046376, -11700771.290690018, 7062739.560403999, -2382022.0750103216, 484577.84025870153, -59434.92165205342, 4067.99337093439, -119.81408629198], [1016735.793157187, -1204986.0678020075, 612714.0091746122, -173254.43765093136, 29419.43811053068, -2999.58215123504, 170.01859862164, -4.13235124947], [331.0348019478, -282.83330229324, 103.22187343228, -20.85915916653, 2.5207341169, -0.18216398525, 0.0072892399, -0.00012459125]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)


def scauchy_dis(x):
    """https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm
    """
    return 1 * mpc_reciprocal((PAI * (1 + x**2)))



@types.vectorize
def gamma_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 1.7450580447912214e-06, 2.490116089582443e-06, 3.980232179164886e-06, 6.960464358329773e-06, 1.2920928716659545e-05, 1.8881393074989317e-05, 2.484185743331909e-05, 3.676278614997864e-05, 4.868371486663818e-05, 9.636742973327637e-05, 0.00019173485946655274, 0.00038246971893310546, 0.0007639394378662109, 0.0030527577514648436, 0.012208031005859375, 0.048829124023437497, 0.19531349609374998, 0.781250984375, 1.56250096875, 3.1250009375, 4.6875009062499995, 6.250000875, 7.81250084375, 9.3750008125, 10.93750078125, 12.50000075, 14.062500718749998, 15.625000687499998]
    coeffA = [[1018.09720298341, 1536564317.347126, -188356973553442.38, 0.0, 0.0], [1280.30423582257, 1226766960.3741076, -96932831427947.1, 0.0, 0.0], [1572.55030501757, 996766984.0625865, -51698974004150.64, 0.0, 0.0], [2032.20587783748, 769747696.8396428, -23676820146576.58, 0.0, 0.0], [2726.61266028543, 572810247.7475606, -9716111384074.67, 0.0, 0.0], [3504.26536557593, 448034777.1946665, -4717247861366.59, 0.0, 0.0], [4127.96370008177, 380895739.11111075, -2910887163045.903, 0.0, 0.0], [4874.06475449444, 322049269.56478363, -1751052744382.154, 0.0, 0.0], [5769.30931401858, 272507808.4675109, -1065861548313.884, 0.0, 0.0], [6557.70935712717, 247093528.98349407, -986102814793.6405, 2251799813685248.0, 0.0], [8605.58390153626, 189426208.29068333, -452123700474.67224, 632107589048141.4, 0.0], [12146.5415122771, 134190909.33720367, -160790075329.25177, 112784093398543.7, 0.0], [17161.79008557367, 94963128.00450906, -57036402493.92954, 20034779723352.086, 0.0], [25135.05971478719, 65336366.7871133, -19767122574.687077, 4453706503244.261, -422995523529626.44], [50288.09531112885, 32611004.329444617, -2488129853.462147, 139846251058.90067, -3320042214535.9805], [100840.31616099816, 16172663.88419545, -318595463.7723025, 4435212929.162645, -26263440271.653297], [203922.423077235, 7813631.231947995, -43382961.60480171, 147580902.1215608, -216074814.85129198], [428693.14133342734, 3313164.925291549, -6739326.1916817995, 5993850.713961597, -2158916.5737013547], [842389.8643957814, 955788.7366587785, -1507126.2664406751, 694669.7206262839, -115133.79050361452], [1448509.9958317257, -579643.1381818211, -17645.18312313009, 39495.21398652404, -5099.38817966558], [1786429.234080426, -1084428.0002848343, 264611.88981233013, -30469.97836414127, 1383.79942420181], [1381878.8097941175, -743786.9142392682, 156527.42624464803, -15151.70973200181, 565.57883732142], [805781.64640427, -370332.41117463657, 65450.0813786443, -5248.76817780601, 160.56960968238], [390367.20542117464, -154457.72537065446, 23297.3065681282, -1583.42057311523, 40.82611459077], [166128.04294720644, -57412.12661776653, 7526.14145307331, -442.79132467528, 9.85101044306], [64270.57101136386, -19668.8151667197, 2276.30509821549, -117.93970892654, 2.30601190375], [23151.6189496558, -6347.73119810643, 656.81716523685, -30.37368411521, 0.52928997443], [7860.73742435953, -1951.10934543808, 182.51613770693, -7.62176695986, 0.11982299901], [23.62352923613, -2.88514489422, 0.12853298569, -0.00246995199, 1.728724e-05]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def chi_square(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0, 1.875, 7.5, 15.0, 22.5]
    coeffA = [[0.0, 1092699.4409328713, -545514.590873739, 134474.55891414508, -20461.33984318656, 1635.3673785324, 0.0], [55656.69207148243, 982388.0963640845, -454593.646204301, 94483.41482100518, -10922.68806514234, 688.54569055714, -18.53905512282], [1762315.1085170861, -390242.3761491093, 26398.04519514483, 460.06483293108, -149.92380781477, 7.3368609086, -0.12057530159], [1705956.8891508654, -440467.9639936565, 48473.28113461802, -2899.76929537908, 99.13799945903, -1.83156605268, 0.01425262613], [439729.22793516814, -89228.77004822598, 7614.19513276209, -349.25856070975, 9.0715463201, -0.12637552994, 0.0007370676]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sexp_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0, 2.5, 5.0, 7.5]
    coeffA = [[4194279.0034393086, -4188097.0259173997, 2063760.4323682606, -637253.6006280022, 120889.32648333826, -10684.45246120693], [3553111.111434528, -2963087.389371894, 1070877.4344022807, -206355.54200917657, 20886.11601769146, -877.03326557364], [1787780.9462581328, -1121553.5036719583, 290483.1973959177, -38582.5170785156, 2614.32773463139, -71.99127440061], [584378.6269254918, -285232.8904193843, 56567.89195629852, -5682.35447476774, 288.46463423554, -5.90940365977]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def slog_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0001, 0.0013207000732421874, 0.002541400146484375, 0.00498280029296875, 0.0098656005859375, 0.03916240234375, 0.31259921875, 1.250096875, 5.0000875, 10.000075, 20.00005, 30.000025]
    coeffA = [[-0.02459122122, 320.74795375661, -807927.7641031268, 595709836.704581, 0.0, 0.0, 0.0, 0.0], [-0.07949862737, -362.70216737733, 1384734.6661831636, -1594840701.3165936, 716278442048.0255, 0.0, 0.0, 0.0], [-1.82626269341, 564.446047639, 2589351.8772282084, -2847813799.364955, 1126358225030.726, -46500449444576.45, 0.0, 0.0], [-193.29772568628, 168808.56904080888, -57529942.69456613, 8110294911.208181, 104696253393.51854, -7457270990729.54, 0.0, 0.0], [-778.995058131, 529866.955288781, -141205630.7978427, 17571755491.763412, -430080334748.5429, 5082897827160.947, -25212739019871.258, 0.0], [59936.88892504593, -9093050.656688388, 484030486.2146117, -4453703974.381204, 21746519664.81399, -62184510527.62109, 97762591412.64555, -65158453477.82124], [-1109183.902950466, 32108975.744755086, -104467281.7945997, 179204397.02311227, -187521009.57327992, 119695001.91613157, -42813573.219068214, 6575795.534236566], [4891763.787415724, -5386461.585168885, 3007539.262436833, -1035726.1407158667, 228445.07527097905, -31499.22624964149, 2476.07992959863, -84.76621756937], [2195658.3279348514, -1438572.6056809507, 441734.09636219766, -79595.68134496752, 8907.46403961222, -611.49932474297, 23.65810262397, -0.39586604295], [537116.1296408644, -194646.340365105, 31937.80408549958, -3012.41121691193, 174.20789836237, -6.12833846644, 0.120800692, -0.00102570685], [111233.02399854318, -24528.14966611781, 2425.49815122946, -137.43388579381, 4.7758589908, -0.10118054502, 0.00120514041, -6.20742e-06], [34447.4937241772, -5504.26174448578, 392.17922184998, -15.96368593887, 0.39793736334, -0.00604429856, 5.161525e-05, -1.9068e-07]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def bs_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.175782244140625, 0.2343759921875, 0.468750984375, 0.93750096875, 1.8750009375, 3.750000875, 5.6250008125, 7.50000075, 9.3750006875]
    coeffA = [[2.284e-06, -2.28403615779, 38.97955681421, 0.0, 0.0, 0.0, 0.0], [-1394.99354220465, 59347.28465605492, -1025243.6804988334, 9046544.094473274, -41405280.26337659, 83812108.17215157, -31785476.9909271], [-2534.28295578745, 128641.74556218075, -2449101.0310443253, 23247823.16037453, -116972054.0888226, 291223221.94802576, -263683532.53738448], [29430.6286553609, -884363.3459733366, 9922869.399676941, -53843794.67782396, 145982610.65934747, -178975908.81302384, 82871684.32550052], [20374.92057828813, 1346707.4603102605, -12481898.790891593, 38734670.033053875, -48396218.50883563, 27852704.87658364, -6239983.532014641], [873480.426362891, -7426108.518711692, 19831039.847721804, -20506520.521454174, 10488267.853694879, -2707897.871674732, 284387.10784328665], [-4717998.370926675, 13056227.164560307, -11362137.357048104, 4844681.667337007, -1126109.3457453507, 138035.3088998428, -7029.05526950078], [5846396.047004766, -5237612.128237029, 1993317.743596979, -411135.19845224265, 48315.78066705656, -3057.8647767813, 81.1782656272], [3158692.3096302664, -2510954.785251632, 841303.77181574, -151825.69741299396, 15542.53720677361, -854.72474013276, 19.70564633307], [605906.0811974547, -393909.21456369886, 107294.33678940918, -15662.0190883406, 1291.40979446399, -56.99916178985, 1.05159310097], [529.52291226794, -168.88068288986, 21.76478385262, -1.45379494359, 0.0532056982, -0.00101395876, 7.87879e-06]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



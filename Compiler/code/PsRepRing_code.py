from mpc_nonlinear import *

@types.vectorize
def tanh(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -6.25, -3.125, -0.78125, 0.0, 0.1953125, 0.78125, 3.125, 12.5]
    coeffA = [[-4194173.072630944, 16.68433970131, 0.86727673568, 0.0183454618, 0.00013652433], [-3608817.0721267513, 445247.40056726034, 126867.3897902733, 16019.69475278112, 755.41149052651], [443310.5643031813, 6149706.701032153, 3217043.811996814, 775435.898513988, 71768.61553282502], [0.0, 4266818.971802611, 429613.84863511875, -693310.0664538674, 0.0], [7e-11, 4194576.231347561, -8890.0752375404, -1339358.640797975, 0.0], [570.1283871191, 4182674.8934939816, 90919.93937296577, -1745585.3274528827, 669002.271183645], [-443310.56430317473, 6149706.701032141, -3217043.81199681, 775435.8985139898, -71768.61553282566], [4045268.042423117, 76088.81124167377, -13754.89484578199, 1054.42721732424, -29.17683277022], [4194279.0022553257, 0.00015393431, -7.02959e-06, 1.3549e-07, -9.4e-10]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def soft_plus(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -14.53125, -13.4375, -12.34375, -11.25, -10.15625, -9.0625, -7.96875, -6.875, -5.78125, -4.6875, -3.59375, -2.5, -1.40625, -0.3125, 0.78125, 1.875, 4.0625, 15.0]
    coeffA = [[216.50722344639, 35.29883556544, 1.91798589049, 0.03471452791], [2055.50147528889, 407.56346747351, 27.063874327, 0.60154808848], [4900.0397541768, 1046.45289243447, 74.90452459883, 1.79587812548], [11472.08809438591, 2654.14458641167, 206.02698058638, 5.36138822731], [26296.09468832056, 6635.37894260311, 562.52870020402, 16.0051370828], [58775.99897485868, 16304.5964463466, 1522.34004878057, 47.77349834938], [127423.35423639054, 39226.76220182843, 4074.70039383195, 142.54500825402], [265961.04334800725, 91890.40398308134, 10751.39405129708, 424.84590412919], [528629.3598911057, 207774.28388533788, 27805.44540558497, 1262.00872058533], [983227.5264598399, 446632.4889272212, 69682.5890122468, 3711.74666890127], [1660767.450522984, 886266.0138986912, 164922.8929899846, 10599.72819780632], [2421726.8897668077, 1529484.2344618044, 346669.1662121743, 27764.0343237273], [2876508.614625285, 2071780.154909041, 563455.9284793288, 56817.42234997382], [2910997.2584912446, 2122558.060007797, 583141.5610020192, 57540.68163907602], [2907352.281155266, 2099678.5381551534, 523209.29083968734, -19394.89645465312], [2920059.5717145572, 2043796.9237770513, 610351.4815246533, -66029.58334532483], [2541607.04441311, 2560619.8756725113, 375203.6883951346, -30212.19436996682], [336248.5003030189, 4097792.847804334, 8742.44417996195, -253.63105873492], [7.81637245571, 4194278.3285520542, 0.0183486991, -0.00015955006]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sigmoid(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -14.0625, -12.5, -10.9375, -9.375, -7.8125, -6.25, -4.6875, -3.125, -1.5625, -0.78125, 0.0, 1.5625, 6.25]
    coeffA = [[39.04050317349, 4.89850230114, 0.22266779325, 0.00436140847, 3.110259e-05], [13199.17733475028, 3638.15329161463, 378.25644554402, 17.56859597785, 0.30738283636], [40012.2430064598, 12326.00868600312, 1434.5748829024, 74.68625393269, 1.46627626567], [114348.25963193768, 39901.1878375304, 5273.66859954668, 312.42739652623, 6.99145300912], [303427.7872428325, 121881.79830384481, 18618.32177702964, 1278.92322584934, 33.26887252545], [727105.1401896989, 342780.98272627854, 61881.56516531322, 5050.85981956463, 156.78091982208], [1486077.5898151868, 838271.7159290379, 183552.65378658805, 18368.32181857447, 704.92482957096], [2298433.5619488554, 1535707.1429087692, 409350.0500425329, 51038.18841377141, 2487.03093801351], [2265248.6629461953, 1433866.8538834178, 329931.63513002236, 27075.5667369432, -37.69601574701], [2099587.2578837527, 1055889.181417289, 2524.40417547048, -100956.99990221234, -19163.74408082196], [2097139.5017196543, 1049670.1684311929, 8264.29721557035, -73582.34760637266, 0.0], [2097139.5017196543, 1066704.742950652, -53701.73107938899, -43331.87915336693, 0.0], [1875484.219568071, 1537426.6752580297, -402130.4764995988, 48464.74365712389, -2242.76923540077], [4166939.6392281144, 4302.39617763188, -223.54909378416, 4.72754763382, -0.03517618631]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def elu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -6.25, -4.0625, -1.875, -0.78125, 0.0006103515625]
    coeffA = [[-4194271.187065585, 0.6748873599, 0.01834870165, 0.00015955008], [-4106988.741624766, 22268.20921643523, 1849.10976216361, 50.16756652301], [-3088279.8165694713, 511031.7876112814, 80778.67337369535, 4339.18189448651], [-1259837.50422231, 1960090.7000926142, 466169.71244532976, 38674.70724333341], [-155039.09821308983, 3632318.4138106937, 1325100.361010493, 188717.18016915815], [6.24117069782, 4182831.6873808536, 2001476.0606318028, 477670.77184647287], [-1.86e-09, 4194279.0034393077, 1.7e-10, -0.0]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def selu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-50.0, -15.0, -6.25, -4.0625, -2.96875, -1.875, -0.78125, 0.0006103515625]
    coeffA = [[-7373945.31140335, 1.18651900634, 0.03225883984, 0.00028050488], [-7220494.103643818, 39149.72342543688, 3250.91861084873, 88.19956446491], [-5429502.637769774, 898444.6370217857, 142016.93052709778, 7628.7127272183], [-3369490.435327218, 2394409.410392051, 505669.98969854985, 37225.08214847879], [-1576803.2166885303, 4244866.525322428, 1144994.7150078525, 111133.56712792422], [-272574.1327547517, 6385976.524274871, 2329658.04031578, 331783.54565652227], [-1791.01473871581, 7339202.948399305, 3487231.8133979393, 819585.1594297808], [-3.73e-09, 4406933.143192683, 2.7e-10, -1e-11]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def gelu(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-20.0, -3.75, -2.5, -1.25, 0.0, 0.3125, 1.25, 2.5, 5.0]
    coeffA = [[-2846.29456290974, -685.23146359561, -50.0054887914, -1.14298260094], [-1916307.361618036, -1581903.5338090858, -437553.98210765066, -40511.57103758872], [-1203980.5555027295, -383499.9956227352, 188181.32542370155, 63626.90145651568], [0.0, 2146329.5646905424, 1950968.8688592135, 471204.06202182453], [1e-11, 2095601.9893701745, 1704585.4234277843, -170739.15500447794], [17204.83322366532, 1960869.5620745495, 2068055.4170300204, -517951.05409748835], [-1203980.555502751, 4577778.999062077, 188181.325423685, -63626.901456513], [-1099094.957902926, 4986962.37709154, -188109.03522665496, 14707.22407252014], [-4.31966047903, 4194279.978923079, -0.06835506716, 0.00151900149]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)


def soft_sign(x):
    pos_flag = x > 0
    x = (pos_flag * x) + (1 - pos_flag) * (-x)
    return x * mpc_reciprocal(1 + x)


def isru(x):
    """Inverse Square Root Unit.
    """
    return x * mpc_reciprocal(mpc_sqrt(1 + ALPHA1 * x**2))



@types.vectorize
def snormal_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [-10.0, -5.3125, -5.0, -4.6875, -4.375, -4.0625, -3.75, -3.125, -2.5, -1.875, -0.625, 0.0, 0.625, 1.875, 2.5, 3.125, 3.75, 4.0625, 4.375, 4.6875, 5.0, 5.3125]
    coeffA = [[170.02631272395, 85.66990161486, 15.96321255108, 1.30517808573, 0.0395529534], [55823.92921096106, 41313.86662200494, 11484.2551034406, 1420.95857926493, 66.02413510026], [159270.13473937128, 124512.0937208249, 36581.30807283994, 4786.27572818813, 235.27733405403], [398340.7441600178, 329497.53673253, 102505.64007788205, 14211.23841439233, 740.68001427359], [868118.4613048523, 760828.7469889144, 251055.19646313167, 36954.83332607815, 2046.81152112829], [1638240.9835706279, 1521710.828523758, 533047.1335021101, 83417.39419194375, 4918.44817877368], [3210817.895278976, 3236919.5678322944, 1235119.279688582, 211232.02323364944, 13650.46726283462], [4270460.910716691, 4552303.101667514, 1847828.6110853604, 338162.6553954407, 23518.15931073408], [2842718.2750923913, 2188146.0372212944, 376546.9093563405, -69624.2681072206, -18947.37846626331], [1591123.705882831, -419072.65384940605, -1664808.0561154042, -781488.1143268576, -112215.93228508197], [1673275.2445434276, -7935.21093366442, -918882.8872440088, -233892.0379649443, 0.0], [1673275.2445434276, 7935.21093366557, -918882.887244016, 233892.0379649529, 0.0], [1591123.7058828506, 419072.65384933155, -1664808.056115301, 781488.1143267968, -112215.9322850692], [2842718.275093746, -2188146.037223906, 376546.9093582283, 69624.26810661472, -18947.37846619054], [4270460.91068422, -4552303.101621034, 1847828.611060461, -338162.6553895248, 23518.15931020808], [3210817.895279698, -3236919.567832787, 1235119.2796886913, -211232.02323365852, 13650.46726283495], [1638240.983615212, -1521710.8285583183, 533047.133511045, -83417.39419271631, 4918.44817877425], [868118.4615385333, -760828.7472140277, 251055.19654436587, -36954.83333909264, 2046.81152190935], [398340.74424066546, -329497.53681224637, 102505.64010708805, -14211.23841910266, 740.68001455619], [159270.1347781044, -124512.09374988408, 36581.30808093846, -4786.27572917978, 235.27733409892], [55823.92921096378, -41313.86662200706, 11484.25510344122, -1420.95857926501, 66.02413510026], [170.02631272397, -85.66990161487, 15.96321255109, -1.30517808573, 0.0395529534]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)


def scauchy_dis(x):
    """https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm
    """
    return 1 * mpc_reciprocal((PAI * (1 + x**2)))



@types.vectorize
def gamma_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 1.7450580447912214e-06, 2.490116089582443e-06, 3.980232179164886e-06, 6.960464358329773e-06, 1.2920928716659545e-05, 2.484185743331909e-05, 4.868371486663818e-05, 9.636742973327637e-05, 0.00019173485946655274, 0.00038246971893310546, 0.0007639394378662109, 0.0030527577514648436, 0.012208031005859375, 0.048829124023437497, 0.19531349609374998, 0.781250984375, 1.56250096875, 3.1250009375, 4.6875009062499995, 6.250000875, 7.81250084375, 9.3750008125, 10.93750078125, 12.50000075, 14.062500718749998, 15.625000687499998]
    coeffA = [[1018.09213015625, 1536576226.6643891, -188366061843360.62, 2251799813685248.0, 0.0], [1280.28437994181, 1226796097.5668669, -96946937598522.47, 2251799813685248.0, 0.0], [1572.47838452603, 996836253.9848976, -51720800386984.26, 2251799813685248.0, 0.0], [2031.86401855856, 769945076.9148647, -23713795578333.02, 2251799813685248.0, 0.0], [2724.59912581678, 573457866.0168536, -9783267647694.781, 2251799813685248.0, 0.0], [3732.9461455438, 418774225.2159852, -3851510161609.4946, 2251799813685248.0, 0.0], [5118.91023882657, 307589428.98777443, -1621672382887.4348, 2251799813685248.0, 0.0], [6557.70935712717, 247093528.98349407, -986102814793.6405, 2251799813685248.0, 0.0], [8605.58390153626, 189426208.29068333, -452123700474.67224, 632107589048141.4, 0.0], [12146.5415122771, 134190909.33720367, -160790075329.25177, 112784093398543.7, 0.0], [17161.79008557367, 94963128.00450906, -57036402493.92954, 20034779723352.086, 0.0], [25135.05971478719, 65336366.7871133, -19767122574.687077, 4453706503244.261, -422995523529626.44], [50288.09531112885, 32611004.329444617, -2488129853.462147, 139846251058.90067, -3320042214535.9805], [100840.31616099816, 16172663.88419545, -318595463.7723025, 4435212929.162645, -26263440271.653297], [203922.423077235, 7813631.231947995, -43382961.60480171, 147580902.1215608, -216074814.85129198], [428693.14133342734, 3313164.925291549, -6739326.1916817995, 5993850.713961597, -2158916.5737013547], [842389.8643957814, 955788.7366587785, -1507126.2664406751, 694669.7206262839, -115133.79050361452], [1448509.9958317257, -579643.1381818211, -17645.18312313009, 39495.21398652404, -5099.38817966558], [1786429.234080426, -1084428.0002848343, 264611.88981233013, -30469.97836414127, 1383.79942420181], [1381878.8097941175, -743786.9142392682, 156527.42624464803, -15151.70973200181, 565.57883732142], [805781.64640427, -370332.41117463657, 65450.0813786443, -5248.76817780601, 160.56960968238], [390367.20542117464, -154457.72537065446, 23297.3065681282, -1583.42057311523, 40.82611459077], [166128.04294720644, -57412.12661776653, 7526.14145307331, -442.79132467528, 9.85101044306], [64270.57101136386, -19668.8151667197, 2276.30509821549, -117.93970892654, 2.30601190375], [23151.6189496558, -6347.73119810643, 656.81716523685, -30.37368411521, 0.52928997443], [7860.73742435953, -1951.10934543808, 182.51613770693, -7.62176695986, 0.11982299901], [23.62352923613, -2.88514489422, 0.12853298569, -0.00246995199, 1.728724e-05]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def chi_square(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0, 0.46875, 1.875, 3.75, 7.5, 11.25, 15.0, 18.75, 22.5, 26.25]
    coeffA = [[5e-11, 1092435.6671879266, -541075.2836601372, 116921.37732871455, 0.0], [2027.9073780942, 1081637.2633818716, -523145.395091922, 113246.34768551229, -10922.00874649408], [106380.3687764125, 878061.851997148, -369542.65157117543, 59837.70613393475, -3688.71901333838], [844149.5771756487, 141899.68484915944, -88658.398460367, 11168.70844184574, -455.2390971674], [1865668.2325220746, -456224.8189840104, 43716.45883289558, -1930.16631746698, 32.87300230642], [1583446.1582686692, -364036.12494953064, 32484.31141086857, -1325.99543007104, 20.78867374856], [863195.5205093293, -169727.7894789232, 12764.00185373446, -433.70793324925, 5.60299383314], [364033.71161798266, -61399.77987192643, 3931.32296105361, -113.03873473672, 1.22959112109], [129160.88473873313, -18963.71050058614, 1052.83525000809, -26.16520085151, 0.2453580262], [40600.55227509184, -5264.42722929344, 257.51746489171, -5.62800059783, 0.04633653246]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def sexp_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0, 0.625, 2.5, 5.0, 7.5]
    coeffA = [[4194279.0034393086, -4188015.40340937, 2032363.5441380604, -514562.51801293145, 0.0, 0.0], [4182306.912914592, -4134143.080131629, 1975884.1921842482, -571126.7171068311, 97638.46337939336, -7598.95601638222], [3553111.111434528, -2963087.389371894, 1070877.4344022807, -206355.54200917657, 20886.11601769146, -877.03326557364], [1787780.9462581328, -1121553.5036719583, 290483.1973959177, -38582.5170785156, 2614.32773463139, -71.99127440061], [584378.6269254918, -285232.8904193843, 56567.89195629852, -5682.35447476774, 288.46463423554, -5.90940365977]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)



@types.vectorize
def slog_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [0.0001, 0.0013207000732421874, 0.002541400146484375, 0.00498280029296875, 0.0098656005859375, 0.019631201171875, 0.0782248046875, 0.31259921875, 0.6250984375, 1.250096875, 2.50009375, 5.0000875, 7.500081250000001, 10.000075, 15.000062500000002, 20.00005, 30.000025]
    coeffA = [[-0.02459122122, 320.74795375661, -807927.7641031268, 595709836.704581, 0.0, 0.0], [-0.07949862737, -362.70216737733, 1384734.6661831636, -1594840701.3165936, 716278442048.0255, 0.0], [-1.82626269341, 564.446047639, 2589351.8772282084, -2847813799.364955, 1126358225030.726, -46500449444576.45], [-193.29772568628, 168808.56904080888, -57529942.69456613, 8110294911.208181, 104696253393.51854, -7457270990729.54], [-897.4276326674, 540138.4737227306, -137012007.9448041, 16735640953.756884, -369286632919.43256, 3078063575133.5435], [36516.71206390907, -6183956.879051516, 353569819.26973516, -1721149132.8565352, -5851617517.129607, 54247735065.525955], [-474417.4140013758, 14212197.217270914, 73083255.96330647, -648805318.1762851, 1676091052.6065054, -1532134252.7771869], [-1059722.9426210881, 30968121.55671164, -95322578.06828417, 143564202.21077386, -113118854.80587624, 37203710.10022292], [2083328.2200729633, 6626001.108766764, -18003570.269079514, 17681893.836339492, -8234684.278864408, 1520341.4730176055], [4752582.524529724, -4961797.905622794, 2479175.3432778483, -690963.0506304469, 102528.69040363713, -6264.87758673702], [3597258.022530166, -2979906.6856354894, 1121236.5766157524, -227793.37785527244, 24268.70438025346, -1065.84286909527], [1717608.2950587263, -945740.3995150056, 227656.75644853013, -28993.3319208319, 1916.92091422938, -52.02761520839], [874448.7667292648, -359469.6857280532, 63568.28548109277, -5895.57419015917, 282.52852064954, -5.54480795472], [385791.14485051186, -116409.29455725956, 14885.54258668259, -988.58366295499, 33.69255212264, -0.4678363835], [145966.4121016853, -32177.75675473314, 2981.92986279658, -142.93407615527, 3.50931766379, -0.03508126599], [48648.47578531306, -7757.05873496464, 515.00219776972, -17.56814460267, 0.30543312922, -0.00215341755], [13881.71124188027, -1600.50451393966, 76.51564223096, -1.8760235402, 0.02342901669, -0.00011868091]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)


@types.vectorize
def bs_dis(x):
    """Version2 of general non linear function.

    Args:
        x (Sfixed): the input secret value.
        coeffA (plain-text 2d python list): The plain-text coefficient of specific non-linear functions.
        breaks (plain-text 1d python list): The plain-rext break points of specific functions.

    Returns:
        Sfixed: f(x) value of specific non-lnear function f.
    """
    
    breaks = [1e-06, 0.11718849609375, 0.14648537011718749, 0.175782244140625, 0.2343759921875, 0.35156348828125, 0.468750984375, 0.93750096875, 1.8750009375, 2.81250090625, 4.68750084375, 5.6250008125, 6.56250078125, 7.50000075, 8.43750071875, 9.3750006875]
    coeffA = [[-3.76986e-06, 3.76997266924, -115.99778441945, 881.63385732906, 0.0], [1081.44890308131, -36372.48014037528, 461274.51736970973, -2616752.4729524194, 5608821.475496719], [4817.51037592144, -137931.29789547363, 1498457.144980657, -7333208.442629924, 13666526.340092681], [4797.06130800926, -145068.96214311194, 1621486.9305696506, -8025651.552925049, 14959637.724940857], [-85176.58203202933, 1296860.8576165247, -7073896.941815233, 15370559.459322885, -8750136.53904917], [-79897.84277248883, 1381235.0013897996, -8061140.730865777, 18458362.055621576, -11832908.981557794], [874247.8028074881, -6070636.939251488, 13928023.825389998, -10630103.41818287, 2735004.8809206644], [-2397655.1623390843, 6371109.203315468, -3894705.651696122, 780539.6723229192, -22110.39378052662], [-1030190.6678381236, 4530994.105566386, -3335986.7595848385, 928673.8130784504, -91527.17236933637], [4257788.857672036, -3189640.986255052, 919937.1149759737, -120618.59282083157, 6046.20365687008], [2381634.2808185974, -1567866.4819735219, 393038.3705952084, -44368.47793519608, 1899.3972985277], [1044741.7189867033, -605749.5131040326, 133028.75991767427, -13096.67313971696, 487.13375784582], [383180.03853790805, -197217.47375171032, 38331.14053324113, -3331.40585591514, 109.15896031321], [124314.96427032384, -57351.40960067204, 9972.37297896834, -774.13193496283, 22.62474446329], [36712.3631664074, -15329.99637952191, 2409.85553785589, -168.95208101877, 4.45568232193], [73.23007112139, -14.77194594175, 1.06700637475, -0.03296802735, 0.00037007322]]
    scaler = [[2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 1.0], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07], [2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07, 2.3842e-07]]
    
    m = len(coeffA)
    k = len(coeffA[0])
    degree = k-1
    
    pre_muls = floatingpoint.PreOpL(lambda a,b,_: a * b, [x] * degree)

    poss_res = [0]*m
    for i in range(m):
        poss_res[i] = coeffA[i][0] * scaler[i][0]
        for j in range(degree):
            poss_res[i] += coeffA[i][j+1] * pre_muls[j] * scaler[i][j+1]

    comp = sfix.Array(m)
    for i in range(m):
        comp[i] = (x >= breaks[i])
    cipher_index = bb.get_last_one(comp) 

    return sfix.dot_product(cipher_index, poss_res)






"""Test the basic performance
"""

import random
import building_blocks as bb

def create_random_array(n, type):
    """ Used to create an random array with length n.
    """
    if type == 'sfix':
        arr = Array(n, sfix)
        @for_range(n)
        def _(i):
            arr[i] = sfix(random.randint(0, 5))
    elif type == 'sint':
        arr = Array(n, sint)
        @for_range(n)
        def _(i):
            arr[i] = sint(random.randint(0, 5)) 
    return arr


def create_arrays_get_last_one(n, type, version='quick'):
    """ Used to generate 0, 1 arrays for get-last-one.
    """
    if type == 'sfix':
        tmp_arr = [sfix(0) for i in range(n)]
        arr = Array.create_from(tmp_arr)
        t_point = random.randint(1, n)
        @for_range_opt(t_point)
        def _(i):
            arr[i] = sfix(1)
    
    elif type == 'sint':
        arr = Array([sint(0) for i in range(n)])
        t_point = random.randint(1, n)
        @for_range_opt(t_point)
        def _(i):
            arr[i] = sint(1)

    return arr
        
        
def vector_test(a, b, c, func='add', debug=True):
    """Test the vector function.
    """

    if func == 'add':
        @for_range_parallel(int(10**5), a.length)
        def _(i):
            c[i] = a[i] + b[i]
        return c

    if func == 'mul':
        @for_range_parallel(int(10**5), a.length)
        def _(i):
            c[i] = a[i] * b[i]
        return c

    if func == 'gt':
        @for_range_parallel(int(10**5), a.length)
        def _(i):
            c[i] = a[i] > b[i]
        return c

    if func == 'eq':

        @for_range_parallel(int(10**5), a.length)
        def _(i):
            c[i] = a[i] == b[i]
        return c
    
    return c
    

def test_basic_ops(n, repeats=1, func_list=None):
    """basic function test
    """
    # func_list = ['add', 'mul', 'gt', 'eq', 'dot_product', 'normed_bits', 'trunc', 'extend']
    if func_list is None:
        func_list = ['add', 'mul', 'gt', 'eq']
        
    type_list = ['sfix']

    for type in type_list:
        a = create_random_array(n, type)
        b = create_random_array(n, type)
        if repeats == 1:
            for func in func_list:
                c = vector_test(a, b, func)
                print_ln(">>> finish %s", func)
        else:
            for func in func_list:
                print_ln("data size: %s\nrepeats: %s", n, repeats)
                start_timer(1)
                @for_range(repeats)
                def _(i):
                    vector_test(a, b, func, debug=False)
                stop_timer(1)
                print_ln(">>> finish %s", func)


data_field=str(program.args[1])
func = str(program.args[2])
n = int(program.args[3])
repeats = int(program.args[4])
data_type = str(program.args[5])

print("parameters: data_field - %s | func - %s | n - %s | repeats - %s | data_type - %s"%(str(program.args[1]), str(program.args[2]), str(program.args[3]), str(program.args[4]), str(program.args[5])))


# optimization settings
sfix.set_precision(32, 74)
if data_field == "ring" and func == "mul":
    program.use_trunc_pr = True
    program.use_split(3)
    print("compiled for ring")
elif data_field == "field":
    program.use_edabit(True)
    print("compiled for field")
else:
    print("other cases.")

print_ln("n = %s | repeats = %s", str(n), str(repeats))
a = create_random_array(n, data_type)
b = create_random_array(n, data_type)
c = Array(n, eval(data_type))

start_timer(1)

@for_range(repeats)
def _(i):
    vector_test(a, b, c, func, debug=False)

stop_timer(1)
print_ln(">>> finish %s", func)


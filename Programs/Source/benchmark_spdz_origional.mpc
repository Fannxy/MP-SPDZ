"""Using the inherent functions in mp-spdz for baseline.
"""
from oram import OptimalORAM
from sorting import *
from util import max
from ml import argmax, argmax_multithread
import pta_funcs as pta

# set parameters: for, opt, parallel
task, N, M, REPEAT, n_parallel = str(program.args[1]), int(program.args[2]), int(program.args[3]), int(program.args[4]), int(program.args[5])

# set task configs.
program.use_split(3)
program.use_trunc_pr = True
program.use_edabit(True)

# generate test data
X = Array(M, sint)
Y = Array(N, sint)
res = Array(N, sint)

start_timer(1)
if(N == 1):
    @for_range_opt(N)
    def _(i):
        Y[i] = sfix(i % 2**14)
else:
    @for_range_multithread(min(N, 256), None, N)
    def _(i):
        Y[i] = sfix(i % 2**14)
    
@for_range_multithread(256, None, M)
def _(i):
    X[i] = sint(i % 2**14)
stop_timer(1)


if(task == "cipher_index"):
    start_timer(99)
    # oram construction.
    XORAM = OptimalORAM(M)
    XORAM.batch_init(X)
    stop_timer(99)

    # access elements in XORAM.
    start_timer(98)
    for i in range(N):
        res[i] = XORAM[sint(1)]
    stop_timer(98)


if(task == "sort"):
    start_timer(2)
    radix_sort(X, X)
    stop_timer(2)

if(task == "max"):
    start_timer(2)
    res[0] = max_multithread(X)
    stop_timer(2)

if(task == "average"):
    start_timer(2)
    res[0] = X.get_vector().sum()
    stop_timer(2)

if(task == "metric"):
    start_timer(2)
    pta.bio_metric(X, Y, 256)
    stop_timer(2)

if(task == "new_search"):
    start_timer(2)
    res[0] = argmax(X)
    stop_timer(2)
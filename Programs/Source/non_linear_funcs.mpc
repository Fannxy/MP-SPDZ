"""Test non-linear functions performance.
"""
import mpc_nonlinear as mn
from nonlinear_config import *

program.use_trunc_pr = True
program.use_split(3)
func_name = program.args[1]

# Set the sfixed settings.
sfix.set_precision(48, 100)
N = 100

# Print the test target in compile and execution stage.
print_ln("Test function %s", func_name)
print("Test functions ", func_name)
func_config = eval(func_name + '_config')

# Fetch the corresponding config information.
coeffA = func_config['coeffA']
breaks = func_config['breaks'][:-1]
m = len(breaks)
k = len(coeffA[0])
print("breaks: ", breaks)


# Test
x = Array.create_from([sfix(i) for i in range(N)])

if (max(m, k) < 200):
    start_timer(1)
    for i in range(N):
        mn.general_non_linear(x[i], coeffA, breaks)
    break_point()
    stop_timer(1)
else: 
    # for too large (k, m) pairs, using @for_range_opt to avoid too heavy compile requirement
    start_timer(1)
    @for_range_opt(N)
    def _(i):
        global breaks
        global coeffA
        ite.general_non_linear_v2(x[i], coeffA, breaks)
    break_point()
    stop_timer(1)



"""Test non-linear functions performance.
"""
import mpc_nonlinear as mn

import Compiler.code.RepPrime_code as repprime
import Compiler.code.PsRepRing_code as psrepring
import Compiler.code.Rep3_code as repring
import Compiler.code.PsRepPrime_code as psrepprime
import Compiler.code.Shamir3_code as shamir

min_max_dict = {
    "tanh": (-50, 50),
    "soft_plus": (-20, 50),
    "sigmoid": (-50, 50),
    "elu": (-50, 20),
    "gelu": (-20, 20),
    "selu": (-50, 20),
    "soft_sign": (-50, 50),
    "isru": (-50, 50),
    "snormal_dis": (-10, 10),
    "scauchy_dis": (-40, 40),
    "gamma_dis": (1e-6, 50.0),
    "chi_square": (0.0, 50),
    "sexp_dis": (0, 10),
    "slog_dis": (0.0001, 50),
    "bs_dis": (1e-6, 30)
}


# Set the sfixed settings.
func_name = program.args[1]
sfix.set_precision(48, 96)
REPEATS=1

if (str(program.args[2]) == "ring"):
    program.use_trunc_pr = True
    program.use_split(3)
    print("compiled for ring")
elif (str(program.args[2]) == "field"):
    program.use_edabit(True)
    print("compiled for field")
else:
    REPEATS = 1
    print("compile for other cases.")

protocol = str(program.args[3])
print(">>>", protocol)
# Print the test target in compile and execution stage.
print_ln("Test function %s", func_name)
print("Test functions ", func_name)
function = eval(protocol+'.'+func_name)

a, b = min_max_dict[func_name]
print("min = %.3f | max = %.3f"%(a, b))

# Test performance.
N = 100
x = Array.create_from([sfix(i) for i in range(N)])

if (str(program.args[2]) == "ring"):
    start_timer(1)
    @for_range(REPEATS)
    def _(j):
        for i in range(N):
            function(x[i])
    break_point()
    stop_timer(1)
else:
    start_timer(1)
    @for_range(REPEATS)
    def _(j):
        @for_range_opt(N)
        def _(i):
            function(x[i])
    break_point()
    stop_timer(1)


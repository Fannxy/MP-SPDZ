"""Test non-linear functions performance.
"""
import mpc_nonlinear as mn

import PsRepPrime_config as psrepprime
import PsRepRing_config as psrepring
import Rep3_config as repring
import RepPrime_config as repprime
import Shamir3_config as shamir


# Set the sfixed settings.
func_name = program.args[1]
sfix.set_precision(48, 128)

if (str(program.args[2]) == "ring"):
    program.use_trunc_pr = True
    program.use_split(3)
    print("compiled for ring")
elif (str(program.args[2]) == "field"):
    program.use_edabit(True)
    print("compiled for field")

protocol = str(program.args[3])
# Print the test target in compile and execution stage.
print_ln("Test function %s", func_name)
print("Test functions ", func_name)
func_config = eval(protocol+'.'+func_name + '_config')[0]

# Fetch the corresponding config information.
coeffA = func_config['coeffA']
scaler = func_config['scaler']
breaks = func_config['breaks']
a, b = breaks[0], breaks[-1]
breaks = breaks[:-1]

print("min = %.3f | max = %.3f"%(a, b))
m = len(breaks)
k = len(coeffA[0])

# Test performance.
N = 100
x = Array.create_from([sfix(i) for i in range(N)])

if (str(program.args[2]) == "ring"):
    start_timer(1)
    for i in range(N):
        mn.general_non_linear(x[i], coeffA, breaks, scaler)
    break_point()
    stop_timer(1)
elif (str(program.args[2]) == "field"):
    start_timer(1)
    @for_range_opt(N)
    def _(i):
        mn.general_non_linear(x[i], coeffA, breaks, scaler)
    break_point()
    stop_timer(1)


from random import random
from random_config import *

REPEATS = 10
sfix.set_precision(48, 96)
if int(program.args[1]) == 1:
    REPEATS=50
    program.use_trunc_pr = True
    program.use_split(3)
    print("compiled acceleration")
elif int(program.args[1]) == 2:
    program.use_edabit(True)
else:
    REPEATS = 5
    print("ps compile.")


k = int(program.args[2])
m = int(program.args[3])

# config_dict = eval('func_'+str(k)+"_"+str(m)+"_config")[0]
# breaks, coeffA, scalerA = config_dict['breaks'], config_dict['coeffA'], config_dict['scaler']
target_func = eval('func_'+str(k)+'_'+str(m))

n = 100
x = Array.create_from([sfix(i) for i in range(n)])

if (len(program.args) <= 4):
    start_timer(1)
    @for_range(REPEATS)
    def _(i):
        for j in range(n):
            target_func(x[j])
    stop_timer(1)
    print_ln("Finish test k = %s, m = %s", k, m)
    
elif (int(program.args[4]) == 0):
    start_timer(1)
    @for_range(REPEATS)
    def _(i):
        @for_range_opt(n)
        def _(j):
            target_func(x[j])
    stop_timer(1)
    print_ln("Finish test k = %s, m = %s", k, m)
    
# if int(program.args[4]) == 0:
#     start_timer(1)
#     for j in range(n):
#         mn.general_non_linear(x[j], coeffA, breaks, scalerA)
#     stop_timer(1)
#     print_ln("Finish test k = %s, m = %s", k, m)
                

            
            
            
        
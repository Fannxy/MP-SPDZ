"""Benchmark for spdz-style parallelization.
"""
import pta_funcs as pta

# set parameters: for, opt, parallel
task, N, M, REPEAT, n_parallel = str(program.args[1]), int(program.args[2]), int(program.args[3]), int(program.args[4]), int(program.args[5])

# set task configs.
program.use_split(3)
program.use_trunc_pr = True
sfix.set_precision(16)

# generate test data
start_timer(2)
X = Array(M, sfix)
Y = Array(N, sfix)

@for_range_opt(N)
def _(i):
    Y[i] = sfix(i % 2**14)

@for_range_multithread(n_parallel, None, M)
def _(i):
    X[i] = sfix(i % 2**14)
stop_timer(2)

print_ln("success generate data!")

if(task == "cipher_index"):
    start_timer(1)
    @for_range(REPEAT)
    def _(i):
        pta.tgl_cipher_index(X, Y, n_parallel)
    break_point()
    stop_timer(1)

if(task == "new_search"):
    start_timer(1)
    @for_range(REPEAT)
    def _(i):
        pta.tgl_search(Y, X, X, n_parallel)
    break_point()
    stop_timer(1)

if(task == "metric"):
    start_timer(1)
    @for_range(REPEAT)
    def _(i):
        pta.tgl_bio_metric(Y, X, n_parallel)
    break_point()
    stop_timer(1)

if(task == "max"):
    start_timer(1)
    @for_range(REPEAT)
    def _(i):
        pta.tgl_max(X, n_parallel)
    break_point()
    stop_timer(1)
    
if(task == "average"):
    start_timer(1)
    @for_range(REPEAT)
    def _(i):
        pta.tgl_average(X, n_parallel)
    break_point()
    stop_timer(1)

if(task == "sort"):
    start_timer(1)
    @for_range(REPEAT)
    def _(i):
        pta.tgl_sort(X, n_parallel)
    break_point()
    stop_timer(1)
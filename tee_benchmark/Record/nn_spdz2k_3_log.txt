Using SPDZ2k security parameter 64
Using statistical security parameter 40
Trying to run 64-bit computation
Current working directory: "/root/MP-SPDZ"
Starting timer 1 at 0 (0 MB, 0 rounds) after 2.3137e-05
Stopped timer 1 at 350.321 (37342.2 MB, 111704 rounds)
guess 9
Compiler: ./compile.py -R 64 benchmark_net
	503 triples of SPDZ2^(64+64) left
	432 bits of SPDZ2^(64+64) left
Spent 2.9546 seconds (41.4241 MB, 40327 rounds) on the online phase and 347.768 seconds (37342.4 MB, 71566 rounds) on the preprocessing/offline phase.
Join timer: 0 350723
Finish timer: 0.00862099
Communication details:
Broadcasting 0.817982 MB in 30759 rounds, taking 9.01205 seconds
Exchanging one-to-one 29030.6 MB in 24538 rounds, taking 23.7511 seconds
Receiving directly 167.001 MB in 19452 rounds, taking 2.19368 seconds
Receiving one-to-one 8154.15 MB in 8682 rounds, taking 16.9465 seconds
Sending directly 166.989 MB in 19418 rounds, taking 0.346388 seconds
Sending one-to-one 8184.95 MB in 8685 rounds, taking 0.911707 seconds
Sending to all 0.536672 MB in 34 rounds, taking 0.000643018 seconds
Sending/receiving 0.0052 MB in 325 rounds, taking 0.0180016 seconds
CPU time = 319.99
The following benchmarks are including preprocessing (offline phase).
Time = 350.731 seconds 
Time1 = 350321 ms (37342.2 MB)
Data sent = 37383.9 MB in ~111893 rounds (party 0 only)
Global data sent = 74736.4 MB (all parties)
Actual cost of program:
  Type int
       1256497        Triples
        786568           Bits
         20700          Opens
         34326   Input tuples (33542 784)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_edabit(True)
This virtual machine was compiled with GCC. Recompile with 'CXX = clang++' in 'CONFIG.mine' for optimal performance.
Coordination took 0.356769 seconds
Command line: ./spdz2k-party.x -N 2 -e --ip-file-name /HOST -p 0 -v benchmark_net

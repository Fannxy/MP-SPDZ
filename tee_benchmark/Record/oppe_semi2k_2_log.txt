Using statistical security parameter 40
Trying to run 64-bit computation
Current working directory: "/"
Compiler: ./compile.py -R 64 sigmoid
	128 dabits of Z2^64 left
Spent 0.0120965 seconds (0.092 MB, 18 rounds) on the online phase and 0.213614 seconds (5.95189 MB, 104 rounds) on the preprocessing/offline phase.
Join timer: 0 225.484
Finish timer: 0.0726262
Communication details:
Exchanging one-to-one 2.91862 MB in 24 rounds, taking 0.00892939 seconds
Receiving directly 0.092 MB in 9 rounds, taking 0.00156659 seconds
Receiving one-to-one 3.08038 MB in 40 rounds, taking 0.00104756 seconds
Sending directly 0.092 MB in 9 rounds, taking 0.000911959 seconds
Sending one-to-one 3.03327 MB in 40 rounds, taking 0.000291457 seconds
CPU time = 0.290588
The following benchmarks are including preprocessing (offline phase).
Time = 0.298597 seconds 
Data sent = 6.04389 MB in ~122 rounds (party 0 only)
Global data sent = 12.1349 MB (all parties)
Actual cost of program:
  Type int
          5700        Triples
          3200           Bits
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(2)
This virtual machine was compiled with GCC. Recompile with 'CXX = clang++' in 'CONFIG.mine' for optimal performance.
Command line: semi2k-party.x -N 2 -e --ip-file-name /HOST -p 0 -v sigmoid
